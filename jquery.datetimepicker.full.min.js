'use strict';
var DateFormatter;
function () {
    var expect;
    var _lpad;
    var _extend;
    var _indexOf;
    var defaultSettings;
    /**
     * @param {string} actual
     * @param {string} val
     * @return {?}
     */
    expect = function (actual, val) {
        return "string" == typeof actual && "string" == typeof val && actual.toLowerCase() === val.toLowerCase();
    };
    /**
     * @param {number} value
     * @param {number} length
     * @param {!Object} chr
     * @return {?}
     */
    _lpad = function (value, length, chr) {
        var C = chr || "0";
        var val = value.toString();
        return val.length < length ? _lpad(C + val, length) : val;
    };
    /**
     * @param {!Object} destination
     * @return {?}
     */
    _extend = function (destination) {
        var i;
        var source;
        destination = destination || {};
        /** @type {number} */
        i = 1;
        for (; i < arguments.length; i++) {
            if (source = arguments[i]) {
                var property;
                for (property in source) {
                    if (source.hasOwnProperty(property)) {
                        if ("object" == typeof source[property]) {
                            _extend(destination[property], source[property]);
                        } else {
                            destination[property] = source[property];
                        }
                    }
                }
            }
        }
        return destination;
    };
    /**
     * @param {string} obj
     * @param {!NodeList} s
     * @return {?}
     */
    _indexOf = function (obj, s) {
        /** @type {number} */
        var i = 0;
        for (; i < s.length; i++) {
            if (s[i].toLowerCase() === obj.toLowerCase()) {
                return i;
            }
        }
        return -1;
    };
    defaultSettings = {
        dateSettings: {
            days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
            daysShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
            months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
            monthsShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
            meridiem: ["AM", "PM"],
            ordinal: function (n) {
                /** @type {number} */
                var nMod10 = n % 10;
                var specialNumbers = {
                    1: "st",
                    2: "nd",
                    3: "rd"
                };
                return 1 !== Math.floor(n % 100 / 10) && specialNumbers[nMod10] ? specialNumbers[nMod10] : "th";
            }
        },
        separators: /[ \-+\/\.T:@]/g,
        validParts: /[dDjlNSwzWFmMntLoYyaABgGhHisueTIOPZcrU]/g,
        intParts: /[djwNzmnyYhHgGis]/g,
        tzParts: /\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing)Time|(?:GMT|UTC)(?:[-+]\d{4})?)\b/g,
        tzClip: /[^-+\dA-Z]/g
    };
    (DateFormatter = function (options) {
        var self = this;
        var config = _extend(defaultSettings, options);
        self.dateSettings = config.dateSettings;
        self.separators = config.separators;
        self.validParts = config.validParts;
        self.intParts = config.intParts;
        self.tzParts = config.tzParts;
        self.tzClip = config.tzClip;
    }).prototype = {
        constructor: DateFormatter,
        getMonth: function (val) {
            var t;
            return 0 === (t = _indexOf(val, this.dateSettings.monthsShort) + 1) && (t = _indexOf(val, this.dateSettings.months) + 1), t;
        },
        parseDate: function (vDate, vFormat) {
            var vFormatParts;
            var vDateParts;
            var i;
            var vDatePart;
            var iDatePart;
            var vMonth;
            var len3;
            var vMeriOffset;
            var len;
            var val3;
            var self = this;
            /** @type {boolean} */
            var m = false;
            /** @type {boolean} */
            var h = false;
            var vSettings = self.dateSettings;
            var out = {
                date: null,
                year: null,
                month: null,
                day: null,
                hour: 0,
                min: 0,
                sec: 0
            };
            if (!vDate) {
                return null;
            }
            if (vDate instanceof Date) {
                return vDate;
            }
            if ("U" === vFormat) {
                return (i = parseInt(vDate)) ? new Date(1e3 * i) : vDate;
            }
            switch (typeof vDate) {
                case "number":
                    return new Date(vDate);
                case "string":
                    break;
                default:
                    return null;
            }
            if (!(vFormatParts = vFormat.match(self.validParts)) || 0 === vFormatParts.length) {
                throw new Error("Invalid date format definition.");
            }
            /** @type {!Array<string>} */
            vDateParts = vDate.replace(self.separators, "\x00").split("\x00");
            /** @type {number} */
            i = 0;
            for (; i < vDateParts.length; i++) {
                switch (vDatePart = vDateParts[i], iDatePart = parseInt(vDatePart), vFormatParts[i]) {
                    case "y":
                    case "Y":
                        if (!iDatePart) {
                            return null;
                        }
                        /** @type {number} */
                        len = vDatePart.length;
                        /** @type {number} */
                        out.year = 2 === len ? parseInt((iDatePart < 70 ? "20" : "19") + vDatePart) : iDatePart;
                        /** @type {boolean} */
                        m = true;
                        break;
                    case "m":
                    case "n":
                    case "M":
                    case "F":
                        if (isNaN(iDatePart)) {
                            if (!(0 < (vMonth = self.getMonth(vDatePart)))) {
                                return null;
                            }
                            out.month = vMonth;
                        } else {
                            if (!(1 <= iDatePart && iDatePart <= 12)) {
                                return null;
                            }
                            /** @type {number} */
                            out.month = iDatePart;
                        }
                        /** @type {boolean} */
                        m = true;
                        break;
                    case "d":
                    case "j":
                        if (!(1 <= iDatePart && iDatePart <= 31)) {
                            return null;
                        }
                        /** @type {number} */
                        out.day = iDatePart;
                        /** @type {boolean} */
                        m = true;
                        break;
                    case "g":
                    case "h":
                        if (val3 = vDateParts[len3 = -1 < vFormatParts.indexOf("a") ? vFormatParts.indexOf("a") : -1 < vFormatParts.indexOf("A") ? vFormatParts.indexOf("A") : -1], -1 < len3) {
                            /** @type {number} */
                            vMeriOffset = expect(val3, vSettings.meridiem[0]) ? 0 : expect(val3, vSettings.meridiem[1]) ? 12 : -1;
                            if (1 <= iDatePart && iDatePart <= 12 && -1 < vMeriOffset) {
                                /** @type {number} */
                                out.hour = iDatePart + vMeriOffset - 1;
                            } else {
                                if (0 <= iDatePart && iDatePart <= 23) {
                                    /** @type {number} */
                                    out.hour = iDatePart;
                                }
                            }
                        } else {
                            if (!(0 <= iDatePart && iDatePart <= 23)) {
                                return null;
                            }
                            /** @type {number} */
                            out.hour = iDatePart;
                        }
                        /** @type {boolean} */
                        h = true;
                        break;
                    case "G":
                    case "H":
                        if (!(0 <= iDatePart && iDatePart <= 23)) {
                            return null;
                        }
                        /** @type {number} */
                        out.hour = iDatePart;
                        /** @type {boolean} */
                        h = true;
                        break;
                    case "i":
                        if (!(0 <= iDatePart && iDatePart <= 59)) {
                            return null;
                        }
                        /** @type {number} */
                        out.min = iDatePart;
                        /** @type {boolean} */
                        h = true;
                        break;
                    case "s":
                        if (!(0 <= iDatePart && iDatePart <= 59)) {
                            return null;
                        }
                        /** @type {number} */
                        out.sec = iDatePart;
                        /** @type {boolean} */
                        h = true;
                }
            }
            if (true === m && out.year && out.month && out.day) {
                /** @type {!Date} */
                out.date = new Date(out.year, out.month - 1, out.day, out.hour, out.min, out.sec, 0);
            } else {
                if (true !== h) {
                    return null;
                }
                /** @type {!Date} */
                out.date = new Date(0, 0, 0, out.hour, out.min, out.sec, 0);
            }
            return out.date;
        },
        guessDate: function (vDateStr, vFormat) {
            if ("string" != typeof vDateStr) {
                return vDateStr;
            }
            var t;
            var vYear;
            var i;
            var p;
            var r;
            var iSec;
            /** @type {!Array<string>} */
            var buffer = vDateStr.replace(this.separators, "\x00").split("\x00");
            var parts = vFormat.match(this.validParts);
            /** @type {!Date} */
            var vDate = new Date;
            /** @type {number} */
            var e = 0;
            if (!/^[djmn]/g.test(parts[0])) {
                return vDateStr;
            }
            /** @type {number} */
            i = 0;
            for (; i < buffer.length; i++) {
                if (e = 2, r = buffer[i], iSec = parseInt(r.substr(0, 2)), isNaN(iSec)) {
                    return null;
                }
                switch (i) {
                    case 0:
                        if ("m" === parts[0] || "n" === parts[0]) {
                            vDate.setMonth(iSec - 1);
                        } else {
                            vDate.setDate(iSec);
                        }
                        break;
                    case 1:
                        if ("m" === parts[0] || "n" === parts[0]) {
                            vDate.setDate(iSec);
                        } else {
                            vDate.setMonth(iSec - 1);
                        }
                        break;
                    case 2:
                        if (vYear = vDate.getFullYear(), e = (t = r.length) < 4 ? t : 4, !(vYear = parseInt(t < 4 ? vYear.toString().substr(0, 4 - t) + r : r.substr(0, 4)))) {
                            return null;
                        }
                        vDate.setFullYear(vYear);
                        break;
                    case 3:
                        vDate.setHours(iSec);
                        break;
                    case 4:
                        vDate.setMinutes(iSec);
                        break;
                    case 5:
                        vDate.setSeconds(iSec);
                }
                if (0 < (p = r.substr(e)).length) {
                    buffer.splice(i + 1, 0, p);
                }
            }
            return vDate;
        },
        parseFormat: function (vChar, vDate) {
            var fmt;
            var self = this;
            var vSettings = self.dateSettings;
            /** @type {!RegExp} */
            var reCopyright = /\\?(.?)/gi;
            /**
             * @param {!Object} t
             * @param {!Object} s
             * @return {?}
             */
            var doFormat = function (t, s) {
                return fmt[t] ? fmt[t]() : s;
            };
            return fmt = {
                d: function () {
                    return _lpad(fmt.j(), 2);
                },
                D: function () {
                    return vSettings.daysShort[fmt.w()];
                },
                j: function () {
                    return vDate.getDate();
                },
                l: function () {
                    return vSettings.days[fmt.w()];
                },
                N: function () {
                    return fmt.w() || 7;
                },
                w: function () {
                    return vDate.getDay();
                },
                z: function () {
                    /** @type {!Date} */
                    var end = new Date(fmt.Y(), fmt.n() - 1, fmt.j());
                    /** @type {!Date} */
                    var begin = new Date(fmt.Y(), 0, 1);
                    return Math.round((end - begin) / 864e5);
                },
                W: function () {
                    /** @type {!Date} */
                    var d = new Date(fmt.Y(), fmt.n() - 1, fmt.j() - fmt.N() + 3);
                    /** @type {!Date} */
                    var firstDayOfYear = new Date(d.getFullYear(), 0, 4);
                    return _lpad(1 + Math.round((d - firstDayOfYear) / 864e5 / 7), 2);
                },
                F: function () {
                    return vSettings.months[vDate.getMonth()];
                },
                m: function () {
                    return _lpad(fmt.n(), 2);
                },
                M: function () {
                    return vSettings.monthsShort[vDate.getMonth()];
                },
                n: function () {
                    return vDate.getMonth() + 1;
                },
                t: function () {
                    return (new Date(fmt.Y(), fmt.n(), 0)).getDate();
                },
                L: function () {
                    var e = fmt.Y();
                    return e % 4 == 0 && e % 100 != 0 || e % 400 == 0 ? 1 : 0;
                },
                o: function () {
                    var number = fmt.n();
                    var num = fmt.W();
                    return fmt.Y() + (12 === number && num < 9 ? 1 : 1 === number && 9 < num ? -1 : 0);
                },
                Y: function () {
                    return vDate.getFullYear();
                },
                y: function () {
                    return fmt.Y().toString().slice(-2);
                },
                a: function () {
                    return fmt.A().toLowerCase();
                },
                A: function () {
                    /** @type {number} */
                    var n = fmt.G() < 12 ? 0 : 1;
                    return vSettings.meridiem[n];
                },
                B: function () {
                    /** @type {number} */
                    var e = 3600 * vDate.getUTCHours();
                    /** @type {number} */
                    var type = 60 * vDate.getUTCMinutes();
                    var fn = vDate.getUTCSeconds();
                    return _lpad(Math.floor((e + type + fn + 3600) / 86.4) % 1e3, 3);
                },
                g: function () {
                    return fmt.G() % 12 || 12;
                },
                G: function () {
                    return vDate.getHours();
                },
                h: function () {
                    return _lpad(fmt.g(), 2);
                },
                H: function () {
                    return _lpad(fmt.G(), 2);
                },
                i: function () {
                    return _lpad(vDate.getMinutes(), 2);
                },
                s: function () {
                    return _lpad(vDate.getSeconds(), 2);
                },
                u: function () {
                    return _lpad(1e3 * vDate.getMilliseconds(), 6);
                },
                e: function () {
                    return /\((.*)\)/.exec(String(vDate))[1] || "Coordinated Universal Time";
                },
                I: function () {
                    return new Date(fmt.Y(), 0) - Date.UTC(fmt.Y(), 0) != new Date(fmt.Y(), 6) - Date.UTC(fmt.Y(), 6) ? 1 : 0;
                },
                O: function () {
                    var utcDayCalib = vDate.getTimezoneOffset();
                    /** @type {number} */
                    var candidatesWidth = Math.abs(utcDayCalib);
                    return (0 < utcDayCalib ? "-" : "+") + _lpad(100 * Math.floor(candidatesWidth / 60) + candidatesWidth % 60, 4);
                },
                P: function () {
                    var e = fmt.O();
                    return e.substr(0, 3) + ":" + e.substr(3, 2);
                },
                T: function () {
                    return (String(vDate).match(self.tzParts) || [""]).pop().replace(self.tzClip, "") || "UTC";
                },
                Z: function () {
                    return 60 * -vDate.getTimezoneOffset();
                },
                c: function () {
                    return "Y-m-d\\TH:i:sP".replace(reCopyright, doFormat);
                },
                r: function () {
                    return "D, d M Y H:i:s O".replace(reCopyright, doFormat);
                },
                U: function () {
                    return vDate.getTime() / 1e3 || 0;
                }
            }, doFormat(vChar, vChar);
        },
        formatDate: function (value, format) {
            var i;
            var n;
            var length;
            var str;
            var code;
            /** @type {string} */
            var output = "";
            if ("string" == typeof value && !(value = this.parseDate(value, format))) {
                return null;
            }
            if (value instanceof Date) {
                length = format.length;
                /** @type {number} */
                i = 0;
                for (; i < length; i++) {
                    if ("S" !== (code = format.charAt(i)) && "\\" !== code) {
                        if (0 < i && "\\" === format.charAt(i - 1)) {
                            /** @type {string} */
                            output = output + code;
                        } else {
                            str = this.parseFormat(code, value);
                            if (i !== length - 1 && this.intParts.test(code) && "S" === format.charAt(i + 1)) {
                                /** @type {number} */
                                n = parseInt(str) || 0;
                                str = str + this.dateSettings.ordinal(n);
                            }
                            /** @type {string} */
                            output = output + str;
                        }
                    }
                }
                return output;
            }
            return "";
        }
    };
}();
/**
 * @param {!Object} $
 * @return {undefined}
 */
var datetimepickerFactory = function ($) {
    /**
     * @param {string} date
     * @param {!Object} desc
     * @param {!Object} style
     * @return {undefined}
     */
    function HighlightedDate(date, desc, style) {
        /** @type {string} */
        this.date = date;
        /** @type {!Object} */
        this.desc = desc;
        /** @type {!Object} */
        this.style = style;
    }
    var default_options = {
        i18n: {
            ar: {
                months: ["\u0643\u0627\u0646\u0648\u0646 \u0627\u0644\u062b\u0627\u0646\u064a", "\u0634\u0628\u0627\u0637", "\u0622\u0630\u0627\u0631", "\u0646\u064a\u0633\u0627\u0646", "\u0645\u0627\u064a\u0648", "\u062d\u0632\u064a\u0631\u0627\u0646", "\u062a\u0645\u0648\u0632", "\u0622\u0628", "\u0623\u064a\u0644\u0648\u0644", "\u062a\u0634\u0631\u064a\u0646 \u0627\u0644\u0623\u0648\u0644", "\u062a\u0634\u0631\u064a\u0646 \u0627\u0644\u062b\u0627\u0646\u064a", "\u0643\u0627\u0646\u0648\u0646 \u0627\u0644\u0623\u0648\u0644"],
                dayOfWeekShort: ["\u0646", "\u062b", "\u0639", "\u062e", "\u062c", "\u0633", "\u062d"],
                dayOfWeek: ["\u0627\u0644\u0623\u062d\u062f", "\u0627\u0644\u0627\u062b\u0646\u064a\u0646", "\u0627\u0644\u062b\u0644\u0627\u062b\u0627\u0621", "\u0627\u0644\u0623\u0631\u0628\u0639\u0627\u0621", "\u0627\u0644\u062e\u0645\u064a\u0633", "\u0627\u0644\u062c\u0645\u0639\u0629", "\u0627\u0644\u0633\u0628\u062a", "\u0627\u0644\u0623\u062d\u062f"]
            },
            ro: {
                months: ["Ianuarie", "Februarie", "Martie", "Aprilie", "Mai", "Iunie", "Iulie", "August", "Septembrie", "Octombrie", "Noiembrie", "Decembrie"],
                dayOfWeekShort: ["Du", "Lu", "Ma", "Mi", "Jo", "Vi", "S\u00e2"],
                dayOfWeek: ["Duminic\u0103", "Luni", "Mar\u0163i", "Miercuri", "Joi", "Vineri", "S\u00e2mb\u0103t\u0103"]
            },
            id: {
                months: ["Januari", "Februari", "Maret", "April", "Mei", "Juni", "Juli", "Agustus", "September", "Oktober", "November", "Desember"],
                dayOfWeekShort: ["Min", "Sen", "Sel", "Rab", "Kam", "Jum", "Sab"],
                dayOfWeek: ["Minggu", "Senin", "Selasa", "Rabu", "Kamis", "Jumat", "Sabtu"]
            },
            is: {
                months: ["Jan\u00faar", "Febr\u00faar", "Mars", "Apr\u00edl", "Ma\u00ed", "J\u00fan\u00ed", "J\u00fal\u00ed", "\u00c1g\u00fast", "September", "Okt\u00f3ber", "N\u00f3vember", "Desember"],
                dayOfWeekShort: ["Sun", "M\u00e1n", "\u00deri\u00f0", "Mi\u00f0", "Fim", "F\u00f6s", "Lau"],
                dayOfWeek: ["Sunnudagur", "M\u00e1nudagur", "\u00deri\u00f0judagur", "Mi\u00f0vikudagur", "Fimmtudagur", "F\u00f6studagur", "Laugardagur"]
            },
            bg: {
                months: ["\u042f\u043d\u0443\u0430\u0440\u0438", "\u0424\u0435\u0432\u0440\u0443\u0430\u0440\u0438", "\u041c\u0430\u0440\u0442", "\u0410\u043f\u0440\u0438\u043b", "\u041c\u0430\u0439", "\u042e\u043d\u0438", "\u042e\u043b\u0438", "\u0410\u0432\u0433\u0443\u0441\u0442", "\u0421\u0435\u043f\u0442\u0435\u043c\u0432\u0440\u0438", "\u041e\u043a\u0442\u043e\u043c\u0432\u0440\u0438", "\u041d\u043e\u0435\u043c\u0432\u0440\u0438", "\u0414\u0435\u043a\u0435\u043c\u0432\u0440\u0438"],
                dayOfWeekShort: ["\u041d\u0434", "\u041f\u043d", "\u0412\u0442", "\u0421\u0440", "\u0427\u0442", "\u041f\u0442", "\u0421\u0431"],
                dayOfWeek: ["\u041d\u0435\u0434\u0435\u043b\u044f", "\u041f\u043e\u043d\u0435\u0434\u0435\u043b\u043d\u0438\u043a", "\u0412\u0442\u043e\u0440\u043d\u0438\u043a", "\u0421\u0440\u044f\u0434\u0430", "\u0427\u0435\u0442\u0432\u044a\u0440\u0442\u044a\u043a", "\u041f\u0435\u0442\u044a\u043a", "\u0421\u044a\u0431\u043e\u0442\u0430"]
            },
            fa: {
                months: ["\u0641\u0631\u0648\u0631\u062f\u06cc\u0646", "\u0627\u0631\u062f\u06cc\u0628\u0647\u0634\u062a", "\u062e\u0631\u062f\u0627\u062f", "\u062a\u06cc\u0631", "\u0645\u0631\u062f\u0627\u062f", "\u0634\u0647\u0631\u06cc\u0648\u0631", "\u0645\u0647\u0631", "\u0622\u0628\u0627\u0646", "\u0622\u0630\u0631", "\u062f\u06cc", "\u0628\u0647\u0645\u0646", "\u0627\u0633\u0641\u0646\u062f"],
                dayOfWeekShort: ["\u06cc\u06a9\u0634\u0646\u0628\u0647", "\u062f\u0648\u0634\u0646\u0628\u0647", "\u0633\u0647 \u0634\u0646\u0628\u0647", "\u0686\u0647\u0627\u0631\u0634\u0646\u0628\u0647", "\u067e\u0646\u062c\u0634\u0646\u0628\u0647", "\u062c\u0645\u0639\u0647", "\u0634\u0646\u0628\u0647"],
                dayOfWeek: ["\u06cc\u06a9\u200c\u0634\u0646\u0628\u0647", "\u062f\u0648\u0634\u0646\u0628\u0647", "\u0633\u0647\u200c\u0634\u0646\u0628\u0647", "\u0686\u0647\u0627\u0631\u0634\u0646\u0628\u0647", "\u067e\u0646\u062c\u200c\u0634\u0646\u0628\u0647", "\u062c\u0645\u0639\u0647", "\u0634\u0646\u0628\u0647", "\u06cc\u06a9\u200c\u0634\u0646\u0628\u0647"]
            },
            ru: {
                months: ["\u042f\u043d\u0432\u0430\u0440\u044c", "\u0424\u0435\u0432\u0440\u0430\u043b\u044c", "\u041c\u0430\u0440\u0442", "\u0410\u043f\u0440\u0435\u043b\u044c", "\u041c\u0430\u0439", "\u0418\u044e\u043d\u044c", "\u0418\u044e\u043b\u044c", "\u0410\u0432\u0433\u0443\u0441\u0442", "\u0421\u0435\u043d\u0442\u044f\u0431\u0440\u044c", "\u041e\u043a\u0442\u044f\u0431\u0440\u044c", "\u041d\u043e\u044f\u0431\u0440\u044c", "\u0414\u0435\u043a\u0430\u0431\u0440\u044c"],
                dayOfWeekShort: ["\u0412\u0441", "\u041f\u043d", "\u0412\u0442", "\u0421\u0440", "\u0427\u0442", "\u041f\u0442", "\u0421\u0431"],
                dayOfWeek: ["\u0412\u043e\u0441\u043a\u0440\u0435\u0441\u0435\u043d\u044c\u0435", "\u041f\u043e\u043d\u0435\u0434\u0435\u043b\u044c\u043d\u0438\u043a", "\u0412\u0442\u043e\u0440\u043d\u0438\u043a", "\u0421\u0440\u0435\u0434\u0430", "\u0427\u0435\u0442\u0432\u0435\u0440\u0433", "\u041f\u044f\u0442\u043d\u0438\u0446\u0430", "\u0421\u0443\u0431\u0431\u043e\u0442\u0430"]
            },
            uk: {
                months: ["\u0421\u0456\u0447\u0435\u043d\u044c", "\u041b\u044e\u0442\u0438\u0439", "\u0411\u0435\u0440\u0435\u0437\u0435\u043d\u044c", "\u041a\u0432\u0456\u0442\u0435\u043d\u044c", "\u0422\u0440\u0430\u0432\u0435\u043d\u044c", "\u0427\u0435\u0440\u0432\u0435\u043d\u044c", "\u041b\u0438\u043f\u0435\u043d\u044c", "\u0421\u0435\u0440\u043f\u0435\u043d\u044c", "\u0412\u0435\u0440\u0435\u0441\u0435\u043d\u044c", "\u0416\u043e\u0432\u0442\u0435\u043d\u044c", "\u041b\u0438\u0441\u0442\u043e\u043f\u0430\u0434",
                    "\u0413\u0440\u0443\u0434\u0435\u043d\u044c"],
                dayOfWeekShort: ["\u041d\u0434\u043b", "\u041f\u043d\u0434", "\u0412\u0442\u0440", "\u0421\u0440\u0434", "\u0427\u0442\u0432", "\u041f\u0442\u043d", "\u0421\u0431\u0442"],
                dayOfWeek: ["\u041d\u0435\u0434\u0456\u043b\u044f", "\u041f\u043e\u043d\u0435\u0434\u0456\u043b\u043e\u043a", "\u0412\u0456\u0432\u0442\u043e\u0440\u043e\u043a", "\u0421\u0435\u0440\u0435\u0434\u0430", "\u0427\u0435\u0442\u0432\u0435\u0440", "\u041f'\u044f\u0442\u043d\u0438\u0446\u044f", "\u0421\u0443\u0431\u043e\u0442\u0430"]
            },
            en: {
                months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
                dayOfWeekShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
                dayOfWeek: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
            },
            el: {
                months: ["\u0399\u03b1\u03bd\u03bf\u03c5\u03ac\u03c1\u03b9\u03bf\u03c2", "\u03a6\u03b5\u03b2\u03c1\u03bf\u03c5\u03ac\u03c1\u03b9\u03bf\u03c2", "\u039c\u03ac\u03c1\u03c4\u03b9\u03bf\u03c2", "\u0391\u03c0\u03c1\u03af\u03bb\u03b9\u03bf\u03c2", "\u039c\u03ac\u03b9\u03bf\u03c2", "\u0399\u03bf\u03cd\u03bd\u03b9\u03bf\u03c2", "\u0399\u03bf\u03cd\u03bb\u03b9\u03bf\u03c2", "\u0391\u03cd\u03b3\u03bf\u03c5\u03c3\u03c4\u03bf\u03c2", "\u03a3\u03b5\u03c0\u03c4\u03ad\u03bc\u03b2\u03c1\u03b9\u03bf\u03c2",
                    "\u039f\u03ba\u03c4\u03ce\u03b2\u03c1\u03b9\u03bf\u03c2", "\u039d\u03bf\u03ad\u03bc\u03b2\u03c1\u03b9\u03bf\u03c2", "\u0394\u03b5\u03ba\u03ad\u03bc\u03b2\u03c1\u03b9\u03bf\u03c2"],
                dayOfWeekShort: ["\u039a\u03c5\u03c1", "\u0394\u03b5\u03c5", "\u03a4\u03c1\u03b9", "\u03a4\u03b5\u03c4", "\u03a0\u03b5\u03bc", "\u03a0\u03b1\u03c1", "\u03a3\u03b1\u03b2"],
                dayOfWeek: ["\u039a\u03c5\u03c1\u03b9\u03b1\u03ba\u03ae", "\u0394\u03b5\u03c5\u03c4\u03ad\u03c1\u03b1", "\u03a4\u03c1\u03af\u03c4\u03b7", "\u03a4\u03b5\u03c4\u03ac\u03c1\u03c4\u03b7", "\u03a0\u03ad\u03bc\u03c0\u03c4\u03b7", "\u03a0\u03b1\u03c1\u03b1\u03c3\u03ba\u03b5\u03c5\u03ae", "\u03a3\u03ac\u03b2\u03b2\u03b1\u03c4\u03bf"]
            },
            de: {
                months: ["Januar", "Februar", "M\u00e4rz", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember"],
                dayOfWeekShort: ["So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"],
                dayOfWeek: ["Sonntag", "Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag"]
            },
            nl: {
                months: ["januari", "februari", "maart", "april", "mei", "juni", "juli", "augustus", "september", "oktober", "november", "december"],
                dayOfWeekShort: ["zo", "ma", "di", "wo", "do", "vr", "za"],
                dayOfWeek: ["zondag", "maandag", "dinsdag", "woensdag", "donderdag", "vrijdag", "zaterdag"]
            },
            tr: {
                months: ["Ocak", "\u015eubat", "Mart", "Nisan", "May\u0131s", "Haziran", "Temmuz", "A\u011fustos", "Eyl\u00fcl", "Ekim", "Kas\u0131m", "Aral\u0131k"],
                dayOfWeekShort: ["Paz", "Pts", "Sal", "\u00c7ar", "Per", "Cum", "Cts"],
                dayOfWeek: ["Pazar", "Pazartesi", "Sal\u0131", "\u00c7ar\u015famba", "Per\u015fembe", "Cuma", "Cumartesi"]
            },
            fr: {
                months: ["Janvier", "F\u00e9vrier", "Mars", "Avril", "Mai", "Juin", "Juillet", "Ao\u00fbt", "Septembre", "Octobre", "Novembre", "D\u00e9cembre"],
                dayOfWeekShort: ["Dim", "Lun", "Mar", "Mer", "Jeu", "Ven", "Sam"],
                dayOfWeek: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"]
            },
            es: {
                months: ["Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre"],
                dayOfWeekShort: ["Dom", "Lun", "Mar", "Mi\u00e9", "Jue", "Vie", "S\u00e1b"],
                dayOfWeek: ["Domingo", "Lunes", "Martes", "Mi\u00e9rcoles", "Jueves", "Viernes", "S\u00e1bado"]
            },
            th: {
                months: ["\u0e21\u0e01\u0e23\u0e32\u0e04\u0e21", "\u0e01\u0e38\u0e21\u0e20\u0e32\u0e1e\u0e31\u0e19\u0e18\u0e4c", "\u0e21\u0e35\u0e19\u0e32\u0e04\u0e21", "\u0e40\u0e21\u0e29\u0e32\u0e22\u0e19", "\u0e1e\u0e24\u0e29\u0e20\u0e32\u0e04\u0e21", "\u0e21\u0e34\u0e16\u0e38\u0e19\u0e32\u0e22\u0e19", "\u0e01\u0e23\u0e01\u0e0e\u0e32\u0e04\u0e21", "\u0e2a\u0e34\u0e07\u0e2b\u0e32\u0e04\u0e21", "\u0e01\u0e31\u0e19\u0e22\u0e32\u0e22\u0e19", "\u0e15\u0e38\u0e25\u0e32\u0e04\u0e21", "\u0e1e\u0e24\u0e28\u0e08\u0e34\u0e01\u0e32\u0e22\u0e19",
                    "\u0e18\u0e31\u0e19\u0e27\u0e32\u0e04\u0e21"],
                dayOfWeekShort: ["\u0e2d\u0e32.", "\u0e08.", "\u0e2d.", "\u0e1e.", "\u0e1e\u0e24.", "\u0e28.", "\u0e2a."],
                dayOfWeek: ["\u0e2d\u0e32\u0e17\u0e34\u0e15\u0e22\u0e4c", "\u0e08\u0e31\u0e19\u0e17\u0e23\u0e4c", "\u0e2d\u0e31\u0e07\u0e04\u0e32\u0e23", "\u0e1e\u0e38\u0e18", "\u0e1e\u0e24\u0e2b\u0e31\u0e2a", "\u0e28\u0e38\u0e01\u0e23\u0e4c", "\u0e40\u0e2a\u0e32\u0e23\u0e4c", "\u0e2d\u0e32\u0e17\u0e34\u0e15\u0e22\u0e4c"]
            },
            pl: {
                months: ["stycze\u0144", "luty", "marzec", "kwiecie\u0144", "maj", "czerwiec", "lipiec", "sierpie\u0144", "wrzesie\u0144", "pa\u017adziernik", "listopad", "grudzie\u0144"],
                dayOfWeekShort: ["nd", "pn", "wt", "\u015br", "cz", "pt", "sb"],
                dayOfWeek: ["niedziela", "poniedzia\u0142ek", "wtorek", "\u015broda", "czwartek", "pi\u0105tek", "sobota"]
            },
            pt: {
                months: ["Janeiro", "Fevereiro", "Mar\u00e7o", "Abril", "Maio", "Junho", "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"],
                dayOfWeekShort: ["Dom", "Seg", "Ter", "Qua", "Qui", "Sex", "Sab"],
                dayOfWeek: ["Domingo", "Segunda", "Ter\u00e7a", "Quarta", "Quinta", "Sexta", "S\u00e1bado"]
            },
            ch: {
                months: ["\u4e00\u6708", "\u4e8c\u6708", "\u4e09\u6708", "\u56db\u6708", "\u4e94\u6708", "\u516d\u6708", "\u4e03\u6708", "\u516b\u6708", "\u4e5d\u6708", "\u5341\u6708", "\u5341\u4e00\u6708", "\u5341\u4e8c\u6708"],
                dayOfWeekShort: ["\u65e5", "\u4e00", "\u4e8c", "\u4e09", "\u56db", "\u4e94", "\u516d"]
            },
            se: {
                months: ["Januari", "Februari", "Mars", "April", "Maj", "Juni", "Juli", "Augusti", "September", "Oktober", "November", "December"],
                dayOfWeekShort: ["S\u00f6n", "M\u00e5n", "Tis", "Ons", "Tor", "Fre", "L\u00f6r"]
            },
            km: {
                months: ["\u1798\u1780\u179a\u17b6\u200b", "\u1780\u17bb\u1798\u17d2\u1797\u17c8", "\u1798\u17b7\u1793\u17b6\u200b", "\u1798\u17c1\u179f\u17b6\u200b", "\u17a7\u179f\u1797\u17b6\u200b", "\u1798\u17b7\u1790\u17bb\u1793\u17b6\u200b", "\u1780\u1780\u17d2\u1780\u178a\u17b6\u200b", "\u179f\u17b8\u17a0\u17b6\u200b", "\u1780\u1789\u17d2\u1789\u17b6\u200b", "\u178f\u17bb\u179b\u17b6\u200b", "\u179c\u17b7\u1785\u17d2\u1786\u17b7\u1780\u17b6", "\u1792\u17d2\u1793\u17bc\u200b"],
                dayOfWeekShort: ["\u17a2\u17b6\u1791\u17b7\u200b", "\u1785\u17d0\u1793\u17d2\u1791\u200b", "\u17a2\u1784\u17d2\u1782\u17b6\u179a\u200b", "\u1796\u17bb\u1792\u200b", "\u1796\u17d2\u179a\u17a0\u200b\u200b", "\u179f\u17bb\u1780\u17d2\u179a\u200b", "\u179f\u17c5\u179a\u17cd"],
                dayOfWeek: ["\u17a2\u17b6\u1791\u17b7\u178f\u17d2\u1799\u200b", "\u1785\u17d0\u1793\u17d2\u1791\u200b", "\u17a2\u1784\u17d2\u1782\u17b6\u179a\u200b", "\u1796\u17bb\u1792\u200b", "\u1796\u17d2\u179a\u17a0\u179f\u17d2\u1794\u178f\u17b7\u17cd\u200b", "\u179f\u17bb\u1780\u17d2\u179a\u200b", "\u179f\u17c5\u179a\u17cd"]
            },
            kr: {
                months: ["1\uc6d4", "2\uc6d4", "3\uc6d4", "4\uc6d4", "5\uc6d4", "6\uc6d4", "7\uc6d4", "8\uc6d4", "9\uc6d4", "10\uc6d4", "11\uc6d4", "12\uc6d4"],
                dayOfWeekShort: ["\uc77c", "\uc6d4", "\ud654", "\uc218", "\ubaa9", "\uae08", "\ud1a0"],
                dayOfWeek: ["\uc77c\uc694\uc77c", "\uc6d4\uc694\uc77c", "\ud654\uc694\uc77c", "\uc218\uc694\uc77c", "\ubaa9\uc694\uc77c", "\uae08\uc694\uc77c", "\ud1a0\uc694\uc77c"]
            },
            it: {
                months: ["Gennaio", "Febbraio", "Marzo", "Aprile", "Maggio", "Giugno", "Luglio", "Agosto", "Settembre", "Ottobre", "Novembre", "Dicembre"],
                dayOfWeekShort: ["Dom", "Lun", "Mar", "Mer", "Gio", "Ven", "Sab"],
                dayOfWeek: ["Domenica", "Luned\u00ec", "Marted\u00ec", "Mercoled\u00ec", "Gioved\u00ec", "Venerd\u00ec", "Sabato"]
            },
            da: {
                months: ["Januar", "Februar", "Marts", "April", "Maj", "Juni", "Juli", "August", "September", "Oktober", "November", "December"],
                dayOfWeekShort: ["S\u00f8n", "Man", "Tir", "Ons", "Tor", "Fre", "L\u00f8r"],
                dayOfWeek: ["s\u00f8ndag", "mandag", "tirsdag", "onsdag", "torsdag", "fredag", "l\u00f8rdag"]
            },
            no: {
                months: ["Januar", "Februar", "Mars", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Desember"],
                dayOfWeekShort: ["S\u00f8n", "Man", "Tir", "Ons", "Tor", "Fre", "L\u00f8r"],
                dayOfWeek: ["S\u00f8ndag", "Mandag", "Tirsdag", "Onsdag", "Torsdag", "Fredag", "L\u00f8rdag"]
            },
            ja: {
                months: ["1\u6708", "2\u6708", "3\u6708", "4\u6708", "5\u6708", "6\u6708", "7\u6708", "8\u6708", "9\u6708", "10\u6708", "11\u6708", "12\u6708"],
                dayOfWeekShort: ["\u65e5", "\u6708", "\u706b", "\u6c34", "\u6728", "\u91d1", "\u571f"],
                dayOfWeek: ["\u65e5\u66dc", "\u6708\u66dc", "\u706b\u66dc", "\u6c34\u66dc", "\u6728\u66dc", "\u91d1\u66dc", "\u571f\u66dc"]
            },
            vi: {
                months: ["Th\u00e1ng 1", "Th\u00e1ng 2", "Th\u00e1ng 3", "Th\u00e1ng 4", "Th\u00e1ng 5", "Th\u00e1ng 6", "Th\u00e1ng 7", "Th\u00e1ng 8", "Th\u00e1ng 9", "Th\u00e1ng 10", "Th\u00e1ng 11", "Th\u00e1ng 12"],
                dayOfWeekShort: ["CN", "T2", "T3", "T4", "T5", "T6", "T7"],
                dayOfWeek: ["Ch\u1ee7 nh\u1eadt", "Th\u1ee9 hai", "Th\u1ee9 ba", "Th\u1ee9 t\u01b0", "Th\u1ee9 n\u0103m", "Th\u1ee9 s\u00e1u", "Th\u1ee9 b\u1ea3y"]
            },
            sl: {
                months: ["Januar", "Februar", "Marec", "April", "Maj", "Junij", "Julij", "Avgust", "September", "Oktober", "November", "December"],
                dayOfWeekShort: ["Ned", "Pon", "Tor", "Sre", "\u010cet", "Pet", "Sob"],
                dayOfWeek: ["Nedelja", "Ponedeljek", "Torek", "Sreda", "\u010cetrtek", "Petek", "Sobota"]
            },
            cs: {
                months: ["Leden", "\u00danor", "B\u0159ezen", "Duben", "Kv\u011bten", "\u010cerven", "\u010cervenec", "Srpen", "Z\u00e1\u0159\u00ed", "\u0158\u00edjen", "Listopad", "Prosinec"],
                dayOfWeekShort: ["Ne", "Po", "\u00dat", "St", "\u010ct", "P\u00e1", "So"]
            },
            hu: {
                months: ["Janu\u00e1r", "Febru\u00e1r", "M\u00e1rcius", "\u00c1prilis", "M\u00e1jus", "J\u00fanius", "J\u00falius", "Augusztus", "Szeptember", "Okt\u00f3ber", "November", "December"],
                dayOfWeekShort: ["Va", "H\u00e9", "Ke", "Sze", "Cs", "P\u00e9", "Szo"],
                dayOfWeek: ["vas\u00e1rnap", "h\u00e9tf\u0151", "kedd", "szerda", "cs\u00fct\u00f6rt\u00f6k", "p\u00e9ntek", "szombat"]
            },
            az: {
                months: ["Yanvar", "Fevral", "Mart", "Aprel", "May", "Iyun", "Iyul", "Avqust", "Sentyabr", "Oktyabr", "Noyabr", "Dekabr"],
                dayOfWeekShort: ["B", "Be", "\u00c7a", "\u00c7", "Ca", "C", "\u015e"],
                dayOfWeek: ["Bazar", "Bazar ert\u0259si", "\u00c7\u0259r\u015f\u0259nb\u0259 ax\u015fam\u0131", "\u00c7\u0259r\u015f\u0259nb\u0259", "C\u00fcm\u0259 ax\u015fam\u0131", "C\u00fcm\u0259", "\u015e\u0259nb\u0259"]
            },
            bs: {
                months: ["Januar", "Februar", "Mart", "April", "Maj", "Jun", "Jul", "Avgust", "Septembar", "Oktobar", "Novembar", "Decembar"],
                dayOfWeekShort: ["Ned", "Pon", "Uto", "Sri", "\u010cet", "Pet", "Sub"],
                dayOfWeek: ["Nedjelja", "Ponedjeljak", "Utorak", "Srijeda", "\u010cetvrtak", "Petak", "Subota"]
            },
            ca: {
                months: ["Gener", "Febrer", "Mar\u00e7", "Abril", "Maig", "Juny", "Juliol", "Agost", "Setembre", "Octubre", "Novembre", "Desembre"],
                dayOfWeekShort: ["Dg", "Dl", "Dt", "Dc", "Dj", "Dv", "Ds"],
                dayOfWeek: ["Diumenge", "Dilluns", "Dimarts", "Dimecres", "Dijous", "Divendres", "Dissabte"]
            },
            "en-GB": {
                months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
                dayOfWeekShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
                dayOfWeek: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
            },
            et: {
                months: ["Jaanuar", "Veebruar", "M\u00e4rts", "Aprill", "Mai", "Juuni", "Juuli", "August", "September", "Oktoober", "November", "Detsember"],
                dayOfWeekShort: ["P", "E", "T", "K", "N", "R", "L"],
                dayOfWeek: ["P\u00fchap\u00e4ev", "Esmasp\u00e4ev", "Teisip\u00e4ev", "Kolmap\u00e4ev", "Neljap\u00e4ev", "Reede", "Laup\u00e4ev"]
            },
            eu: {
                months: ["Urtarrila", "Otsaila", "Martxoa", "Apirila", "Maiatza", "Ekaina", "Uztaila", "Abuztua", "Iraila", "Urria", "Azaroa", "Abendua"],
                dayOfWeekShort: ["Ig.", "Al.", "Ar.", "Az.", "Og.", "Or.", "La."],
                dayOfWeek: ["Igandea", "Astelehena", "Asteartea", "Asteazkena", "Osteguna", "Ostirala", "Larunbata"]
            },
            fi: {
                months: ["Tammikuu", "Helmikuu", "Maaliskuu", "Huhtikuu", "Toukokuu", "Kes\u00e4kuu", "Hein\u00e4kuu", "Elokuu", "Syyskuu", "Lokakuu", "Marraskuu", "Joulukuu"],
                dayOfWeekShort: ["Su", "Ma", "Ti", "Ke", "To", "Pe", "La"],
                dayOfWeek: ["sunnuntai", "maanantai", "tiistai", "keskiviikko", "torstai", "perjantai", "lauantai"]
            },
            gl: {
                months: ["Xan", "Feb", "Maz", "Abr", "Mai", "Xun", "Xul", "Ago", "Set", "Out", "Nov", "Dec"],
                dayOfWeekShort: ["Dom", "Lun", "Mar", "Mer", "Xov", "Ven", "Sab"],
                dayOfWeek: ["Domingo", "Luns", "Martes", "M\u00e9rcores", "Xoves", "Venres", "S\u00e1bado"]
            },
            hr: {
                months: ["Sije\u010danj", "Velja\u010da", "O\u017eujak", "Travanj", "Svibanj", "Lipanj", "Srpanj", "Kolovoz", "Rujan", "Listopad", "Studeni", "Prosinac"],
                dayOfWeekShort: ["Ned", "Pon", "Uto", "Sri", "\u010cet", "Pet", "Sub"],
                dayOfWeek: ["Nedjelja", "Ponedjeljak", "Utorak", "Srijeda", "\u010cetvrtak", "Petak", "Subota"]
            },
            ko: {
                months: ["1\uc6d4", "2\uc6d4", "3\uc6d4", "4\uc6d4", "5\uc6d4", "6\uc6d4", "7\uc6d4", "8\uc6d4", "9\uc6d4", "10\uc6d4", "11\uc6d4", "12\uc6d4"],
                dayOfWeekShort: ["\uc77c", "\uc6d4", "\ud654", "\uc218", "\ubaa9", "\uae08", "\ud1a0"],
                dayOfWeek: ["\uc77c\uc694\uc77c", "\uc6d4\uc694\uc77c", "\ud654\uc694\uc77c", "\uc218\uc694\uc77c", "\ubaa9\uc694\uc77c", "\uae08\uc694\uc77c", "\ud1a0\uc694\uc77c"]
            },
            lt: {
                months: ["Sausio", "Vasario", "Kovo", "Baland\u017eio", "Gegu\u017e\u0117s", "Bir\u017eelio", "Liepos", "Rugpj\u016b\u010dio", "Rugs\u0117jo", "Spalio", "Lapkri\u010dio", "Gruod\u017eio"],
                dayOfWeekShort: ["Sek", "Pir", "Ant", "Tre", "Ket", "Pen", "\u0160e\u0161"],
                dayOfWeek: ["Sekmadienis", "Pirmadienis", "Antradienis", "Tre\u010diadienis", "Ketvirtadienis", "Penktadienis", "\u0160e\u0161tadienis"]
            },
            lv: {
                months: ["Janv\u0101ris", "Febru\u0101ris", "Marts", "Apr\u012blis ", "Maijs", "J\u016bnijs", "J\u016blijs", "Augusts", "Septembris", "Oktobris", "Novembris", "Decembris"],
                dayOfWeekShort: ["Sv", "Pr", "Ot", "Tr", "Ct", "Pk", "St"],
                dayOfWeek: ["Sv\u0113tdiena", "Pirmdiena", "Otrdiena", "Tre\u0161diena", "Ceturtdiena", "Piektdiena", "Sestdiena"]
            },
            mk: {
                months: ["\u0458\u0430\u043d\u0443\u0430\u0440\u0438", "\u0444\u0435\u0432\u0440\u0443\u0430\u0440\u0438", "\u043c\u0430\u0440\u0442", "\u0430\u043f\u0440\u0438\u043b", "\u043c\u0430\u0458", "\u0458\u0443\u043d\u0438", "\u0458\u0443\u043b\u0438", "\u0430\u0432\u0433\u0443\u0441\u0442", "\u0441\u0435\u043f\u0442\u0435\u043c\u0432\u0440\u0438", "\u043e\u043a\u0442\u043e\u043c\u0432\u0440\u0438", "\u043d\u043e\u0435\u043c\u0432\u0440\u0438", "\u0434\u0435\u043a\u0435\u043c\u0432\u0440\u0438"],
                dayOfWeekShort: ["\u043d\u0435\u0434", "\u043f\u043e\u043d", "\u0432\u0442\u043e", "\u0441\u0440\u0435", "\u0447\u0435\u0442", "\u043f\u0435\u0442", "\u0441\u0430\u0431"],
                dayOfWeek: ["\u041d\u0435\u0434\u0435\u043b\u0430", "\u041f\u043e\u043d\u0435\u0434\u0435\u043b\u043d\u0438\u043a", "\u0412\u0442\u043e\u0440\u043d\u0438\u043a", "\u0421\u0440\u0435\u0434\u0430", "\u0427\u0435\u0442\u0432\u0440\u0442\u043e\u043a", "\u041f\u0435\u0442\u043e\u043a", "\u0421\u0430\u0431\u043e\u0442\u0430"]
            },
            mn: {
                months: ["1-\u0440 \u0441\u0430\u0440", "2-\u0440 \u0441\u0430\u0440", "3-\u0440 \u0441\u0430\u0440", "4-\u0440 \u0441\u0430\u0440", "5-\u0440 \u0441\u0430\u0440", "6-\u0440 \u0441\u0430\u0440", "7-\u0440 \u0441\u0430\u0440", "8-\u0440 \u0441\u0430\u0440", "9-\u0440 \u0441\u0430\u0440", "10-\u0440 \u0441\u0430\u0440", "11-\u0440 \u0441\u0430\u0440", "12-\u0440 \u0441\u0430\u0440"],
                dayOfWeekShort: ["\u0414\u0430\u0432", "\u041c\u044f\u0433", "\u041b\u0445\u0430", "\u041f\u04af\u0440", "\u0411\u0441\u043d", "\u0411\u044f\u043c", "\u041d\u044f\u043c"],
                dayOfWeek: ["\u0414\u0430\u0432\u0430\u0430", "\u041c\u044f\u0433\u043c\u0430\u0440", "\u041b\u0445\u0430\u0433\u0432\u0430", "\u041f\u04af\u0440\u044d\u0432", "\u0411\u0430\u0430\u0441\u0430\u043d", "\u0411\u044f\u043c\u0431\u0430", "\u041d\u044f\u043c"]
            },
            "pt-BR": {
                months: ["Janeiro", "Fevereiro", "Mar\u00e7o", "Abril", "Maio", "Junho", "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"],
                dayOfWeekShort: ["Dom", "Seg", "Ter", "Qua", "Qui", "Sex", "S\u00e1b"],
                dayOfWeek: ["Domingo", "Segunda", "Ter\u00e7a", "Quarta", "Quinta", "Sexta", "S\u00e1bado"]
            },
            sk: {
                months: ["Janu\u00e1r", "Febru\u00e1r", "Marec", "Apr\u00edl", "M\u00e1j", "J\u00fan", "J\u00fal", "August", "September", "Okt\u00f3ber", "November", "December"],
                dayOfWeekShort: ["Ne", "Po", "Ut", "St", "\u0160t", "Pi", "So"],
                dayOfWeek: ["Nede\u013ea", "Pondelok", "Utorok", "Streda", "\u0160tvrtok", "Piatok", "Sobota"]
            },
            sq: {
                months: ["Janar", "Shkurt", "Mars", "Prill", "Maj", "Qershor", "Korrik", "Gusht", "Shtator", "Tetor", "N\u00ebntor", "Dhjetor"],
                dayOfWeekShort: ["Die", "H\u00ebn", "Mar", "M\u00ebr", "Enj", "Pre", "Shtu"],
                dayOfWeek: ["E Diel", "E H\u00ebn\u00eb", "E Mart\u0113", "E M\u00ebrkur\u00eb", "E Enjte", "E Premte", "E Shtun\u00eb"]
            },
            "sr-YU": {
                months: ["Januar", "Februar", "Mart", "April", "Maj", "Jun", "Jul", "Avgust", "Septembar", "Oktobar", "Novembar", "Decembar"],
                dayOfWeekShort: ["Ned", "Pon", "Uto", "Sre", "\u010det", "Pet", "Sub"],
                dayOfWeek: ["Nedelja", "Ponedeljak", "Utorak", "Sreda", "\u010cetvrtak", "Petak", "Subota"]
            },
            sr: {
                months: ["\u0458\u0430\u043d\u0443\u0430\u0440", "\u0444\u0435\u0431\u0440\u0443\u0430\u0440", "\u043c\u0430\u0440\u0442", "\u0430\u043f\u0440\u0438\u043b", "\u043c\u0430\u0458", "\u0458\u0443\u043d", "\u0458\u0443\u043b", "\u0430\u0432\u0433\u0443\u0441\u0442", "\u0441\u0435\u043f\u0442\u0435\u043c\u0431\u0430\u0440", "\u043e\u043a\u0442\u043e\u0431\u0430\u0440", "\u043d\u043e\u0432\u0435\u043c\u0431\u0430\u0440", "\u0434\u0435\u0446\u0435\u043c\u0431\u0430\u0440"],
                dayOfWeekShort: ["\u043d\u0435\u0434", "\u043f\u043e\u043d", "\u0443\u0442\u043e", "\u0441\u0440\u0435", "\u0447\u0435\u0442", "\u043f\u0435\u0442", "\u0441\u0443\u0431"],
                dayOfWeek: ["\u041d\u0435\u0434\u0435\u0459\u0430", "\u041f\u043e\u043d\u0435\u0434\u0435\u0459\u0430\u043a", "\u0423\u0442\u043e\u0440\u0430\u043a", "\u0421\u0440\u0435\u0434\u0430", "\u0427\u0435\u0442\u0432\u0440\u0442\u0430\u043a", "\u041f\u0435\u0442\u0430\u043a", "\u0421\u0443\u0431\u043e\u0442\u0430"]
            },
            sv: {
                months: ["Januari", "Februari", "Mars", "April", "Maj", "Juni", "Juli", "Augusti", "September", "Oktober", "November", "December"],
                dayOfWeekShort: ["S\u00f6n", "M\u00e5n", "Tis", "Ons", "Tor", "Fre", "L\u00f6r"],
                dayOfWeek: ["S\u00f6ndag", "M\u00e5ndag", "Tisdag", "Onsdag", "Torsdag", "Fredag", "L\u00f6rdag"]
            },
            "zh-TW": {
                months: ["\u4e00\u6708", "\u4e8c\u6708", "\u4e09\u6708", "\u56db\u6708", "\u4e94\u6708", "\u516d\u6708", "\u4e03\u6708", "\u516b\u6708", "\u4e5d\u6708", "\u5341\u6708", "\u5341\u4e00\u6708", "\u5341\u4e8c\u6708"],
                dayOfWeekShort: ["\u65e5", "\u4e00", "\u4e8c", "\u4e09", "\u56db", "\u4e94", "\u516d"],
                dayOfWeek: ["\u661f\u671f\u65e5", "\u661f\u671f\u4e00", "\u661f\u671f\u4e8c", "\u661f\u671f\u4e09", "\u661f\u671f\u56db", "\u661f\u671f\u4e94", "\u661f\u671f\u516d"]
            },
            zh: {
                months: ["\u4e00\u6708", "\u4e8c\u6708", "\u4e09\u6708", "\u56db\u6708", "\u4e94\u6708", "\u516d\u6708", "\u4e03\u6708", "\u516b\u6708", "\u4e5d\u6708", "\u5341\u6708", "\u5341\u4e00\u6708", "\u5341\u4e8c\u6708"],
                dayOfWeekShort: ["\u65e5", "\u4e00", "\u4e8c", "\u4e09", "\u56db", "\u4e94", "\u516d"],
                dayOfWeek: ["\u661f\u671f\u65e5", "\u661f\u671f\u4e00", "\u661f\u671f\u4e8c", "\u661f\u671f\u4e09", "\u661f\u671f\u56db", "\u661f\u671f\u4e94", "\u661f\u671f\u516d"]
            },
            ug: {
                months: ["1-\u0626\u0627\u064a", "2-\u0626\u0627\u064a", "3-\u0626\u0627\u064a", "4-\u0626\u0627\u064a", "5-\u0626\u0627\u064a", "6-\u0626\u0627\u064a", "7-\u0626\u0627\u064a", "8-\u0626\u0627\u064a", "9-\u0626\u0627\u064a", "10-\u0626\u0627\u064a", "11-\u0626\u0627\u064a", "12-\u0626\u0627\u064a"],
                dayOfWeek: ["\u064a\u06d5\u0643\u0634\u06d5\u0646\u0628\u06d5", "\u062f\u06c8\u0634\u06d5\u0646\u0628\u06d5", "\u0633\u06d5\u064a\u0634\u06d5\u0646\u0628\u06d5", "\u0686\u0627\u0631\u0634\u06d5\u0646\u0628\u06d5", "\u067e\u06d5\u064a\u0634\u06d5\u0646\u0628\u06d5", "\u062c\u06c8\u0645\u06d5", "\u0634\u06d5\u0646\u0628\u06d5"]
            },
            he: {
                months: ["\u05d9\u05e0\u05d5\u05d0\u05e8", "\u05e4\u05d1\u05e8\u05d5\u05d0\u05e8", "\u05de\u05e8\u05e5", "\u05d0\u05e4\u05e8\u05d9\u05dc", "\u05de\u05d0\u05d9", "\u05d9\u05d5\u05e0\u05d9", "\u05d9\u05d5\u05dc\u05d9", "\u05d0\u05d5\u05d2\u05d5\u05e1\u05d8", "\u05e1\u05e4\u05d8\u05de\u05d1\u05e8", "\u05d0\u05d5\u05e7\u05d8\u05d5\u05d1\u05e8", "\u05e0\u05d5\u05d1\u05de\u05d1\u05e8", "\u05d3\u05e6\u05de\u05d1\u05e8"],
                dayOfWeekShort: ["\u05d0'", "\u05d1'", "\u05d2'", "\u05d3'", "\u05d4'", "\u05d5'", "\u05e9\u05d1\u05ea"],
                dayOfWeek: ["\u05e8\u05d0\u05e9\u05d5\u05df", "\u05e9\u05e0\u05d9", "\u05e9\u05dc\u05d9\u05e9\u05d9", "\u05e8\u05d1\u05d9\u05e2\u05d9", "\u05d7\u05de\u05d9\u05e9\u05d9", "\u05e9\u05d9\u05e9\u05d9", "\u05e9\u05d1\u05ea", "\u05e8\u05d0\u05e9\u05d5\u05df"]
            },
            hy: {
                months: ["\u0540\u0578\u0582\u0576\u057e\u0561\u0580", "\u0553\u0565\u057f\u0580\u057e\u0561\u0580", "\u0544\u0561\u0580\u057f", "\u0531\u057a\u0580\u056b\u056c", "\u0544\u0561\u0575\u056b\u057d", "\u0540\u0578\u0582\u0576\u056b\u057d", "\u0540\u0578\u0582\u056c\u056b\u057d", "\u0555\u0563\u0578\u057d\u057f\u0578\u057d", "\u054d\u0565\u057a\u057f\u0565\u0574\u0562\u0565\u0580", "\u0540\u0578\u056f\u057f\u0565\u0574\u0562\u0565\u0580", "\u0546\u0578\u0575\u0565\u0574\u0562\u0565\u0580", "\u0534\u0565\u056f\u057f\u0565\u0574\u0562\u0565\u0580"],
                dayOfWeekShort: ["\u053f\u056b", "\u0535\u0580\u056f", "\u0535\u0580\u0584", "\u0549\u0578\u0580", "\u0540\u0576\u0563", "\u0548\u0582\u0580\u0562", "\u0547\u0562\u0569"],
                dayOfWeek: ["\u053f\u056b\u0580\u0561\u056f\u056b", "\u0535\u0580\u056f\u0578\u0582\u0577\u0561\u0562\u0569\u056b", "\u0535\u0580\u0565\u0584\u0577\u0561\u0562\u0569\u056b", "\u0549\u0578\u0580\u0565\u0584\u0577\u0561\u0562\u0569\u056b", "\u0540\u056b\u0576\u0563\u0577\u0561\u0562\u0569\u056b", "\u0548\u0582\u0580\u0562\u0561\u0569", "\u0547\u0561\u0562\u0561\u0569"]
            },
            kg: {
                months: ["\u04ae\u0447\u0442\u04af\u043d \u0430\u0439\u044b", "\u0411\u0438\u0440\u0434\u0438\u043d \u0430\u0439\u044b", "\u0416\u0430\u043b\u0433\u0430\u043d \u041a\u0443\u0440\u0430\u043d", "\u0427\u044b\u043d \u041a\u0443\u0440\u0430\u043d", "\u0411\u0443\u0433\u0443", "\u041a\u0443\u043b\u0436\u0430", "\u0422\u0435\u043a\u0435", "\u0411\u0430\u0448 \u041e\u043e\u043d\u0430", "\u0410\u044f\u043a \u041e\u043e\u043d\u0430", "\u0422\u043e\u0433\u0443\u0437\u0434\u0443\u043d \u0430\u0439\u044b",
                    "\u0416\u0435\u0442\u0438\u043d\u0438\u043d \u0430\u0439\u044b", "\u0411\u0435\u0448\u0442\u0438\u043d \u0430\u0439\u044b"],
                dayOfWeekShort: ["\u0416\u0435\u043a", "\u0414\u04af\u0439", "\u0428\u0435\u0439", "\u0428\u0430\u0440", "\u0411\u0435\u0439", "\u0416\u0443\u043c", "\u0418\u0448\u0435"],
                dayOfWeek: ["\u0416\u0435\u043a\u0448\u0435\u043c\u0431", "\u0414\u04af\u0439\u0448\u04e9\u043c\u0431", "\u0428\u0435\u0439\u0448\u0435\u043c\u0431", "\u0428\u0430\u0440\u0448\u0435\u043c\u0431", "\u0411\u0435\u0439\u0448\u0435\u043c\u0431\u0438", "\u0416\u0443\u043c\u0430", "\u0418\u0448\u0435\u043d\u0431"]
            },
            rm: {
                months: ["Schaner", "Favrer", "Mars", "Avrigl", "Matg", "Zercladur", "Fanadur", "Avust", "Settember", "October", "November", "December"],
                dayOfWeekShort: ["Du", "Gli", "Ma", "Me", "Gie", "Ve", "So"],
                dayOfWeek: ["Dumengia", "Glindesdi", "Mardi", "Mesemna", "Gievgia", "Venderdi", "Sonda"]
            },
            ka: {
                months: ["\u10d8\u10d0\u10dc\u10d5\u10d0\u10e0\u10d8", "\u10d7\u10d4\u10d1\u10d4\u10e0\u10d5\u10d0\u10da\u10d8", "\u10db\u10d0\u10e0\u10e2\u10d8", "\u10d0\u10de\u10e0\u10d8\u10da\u10d8", "\u10db\u10d0\u10d8\u10e1\u10d8", "\u10d8\u10d5\u10dc\u10d8\u10e1\u10d8", "\u10d8\u10d5\u10da\u10d8\u10e1\u10d8", "\u10d0\u10d2\u10d5\u10d8\u10e1\u10e2\u10dd", "\u10e1\u10d4\u10e5\u10e2\u10d4\u10db\u10d1\u10d4\u10e0\u10d8", "\u10dd\u10e5\u10e2\u10dd\u10db\u10d1\u10d4\u10e0\u10d8", "\u10dc\u10dd\u10d4\u10db\u10d1\u10d4\u10e0\u10d8",
                    "\u10d3\u10d4\u10d9\u10d4\u10db\u10d1\u10d4\u10e0\u10d8"],
                dayOfWeekShort: ["\u10d9\u10d5", "\u10dd\u10e0\u10e8", "\u10e1\u10d0\u10db\u10e8", "\u10dd\u10d7\u10ee", "\u10ee\u10e3\u10d7", "\u10de\u10d0\u10e0", "\u10e8\u10d0\u10d1"],
                dayOfWeek: ["\u10d9\u10d5\u10d8\u10e0\u10d0", "\u10dd\u10e0\u10e8\u10d0\u10d1\u10d0\u10d7\u10d8", "\u10e1\u10d0\u10db\u10e8\u10d0\u10d1\u10d0\u10d7\u10d8", "\u10dd\u10d7\u10ee\u10e8\u10d0\u10d1\u10d0\u10d7\u10d8", "\u10ee\u10e3\u10d7\u10e8\u10d0\u10d1\u10d0\u10d7\u10d8", "\u10de\u10d0\u10e0\u10d0\u10e1\u10d9\u10d4\u10d5\u10d8", "\u10e8\u10d0\u10d1\u10d0\u10d7\u10d8"]
            }
        },
        ownerDocument: document,
        contentWindow: window,
        value: "",
        rtl: false,
        format: "Y/m/d H:i",
        formatTime: "H:i",
        formatDate: "Y/m/d",
        startDate: false,
        step: 60,
        monthChangeSpinner: true,
        closeOnDateSelect: false,
        closeOnTimeSelect: true,
        closeOnWithoutClick: true,
        closeOnInputClick: true,
        openOnFocus: true,
        timepicker: true,
        datepicker: true,
        weeks: false,
        defaultTime: false,
        defaultDate: false,
        minDate: false,
        maxDate: false,
        minTime: false,
        maxTime: false,
        minDateTime: false,
        maxDateTime: false,
        allowTimes: [],
        opened: false,
        initTime: true,
        inline: false,
        theme: "",
        touchMovedThreshold: 5,
        onSelectDate: function () {
        },
        onSelectTime: function () {
        },
        onChangeMonth: function () {
        },
        onGetWeekOfYear: function () {
        },
        onChangeYear: function () {
        },
        onChangeDateTime: function () {
        },
        onShow: function () {
        },
        onClose: function () {
        },
        onGenerate: function () {
        },
        withoutCopyright: true,
        inverseButton: false,
        hours12: false,
        next: "xdsoft_next",
        prev: "xdsoft_prev",
        dayOfWeekStart: 0,
        parentID: "body",
        timeHeightInTimePicker: 25,
        timepickerScrollbar: true,
        todayButton: true,
        prevButton: true,
        nextButton: true,
        defaultSelect: true,
        scrollMonth: true,
        scrollTime: true,
        scrollInput: true,
        lazyInit: false,
        mask: false,
        validateOnBlur: true,
        allowBlank: true,
        yearStart: 1950,
        yearEnd: 2050,
        monthStart: 0,
        monthEnd: 11,
        style: "",
        id: "",
        fixed: false,
        roundTime: "round",
        className: "",
        weekends: [],
        highlightedDates: [],
        highlightedPeriods: [],
        allowDates: [],
        allowDateRe: null,
        disabledDates: [],
        disabledWeekDays: [],
        yearOffset: 0,
        beforeShowDay: null,
        enterLikeTab: true,
        showApplyButton: false,
        insideParent: false
    };
    /** @type {null} */
    var dateHelper = null;
    /** @type {null} */
    var calendar = null;
    /** @type {string} */
    var globalLocale = "en";
    var dateFormatterOptionsDefault = {
        meridiem: ["AM", "PM"]
    };
    /**
     * @return {undefined}
     */
    var initDateFormatter = function () {
        var locale = default_options.i18n[globalLocale];
        var opts = {
            days: locale.dayOfWeek,
            daysShort: locale.dayOfWeekShort,
            months: locale.months,
            monthsShort: $.map(locale.months, function (OldString) {
                return OldString.substring(0, 3);
            })
        };
        if ("function" == typeof DateFormatter) {
            dateHelper = calendar = new DateFormatter({
                dateSettings: $.extend({}, dateFormatterOptionsDefault, opts)
            });
        }
    };
    var args = {
        moment: {
            default_options: {
                format: "YYYY/MM/DD HH:mm",
                formatDate: "YYYY/MM/DD",
                formatTime: "HH:mm"
            },
            formatter: {
                parseDate: function (d, format) {
                    if (isString(format)) {
                        return calendar.parseDate(d, format);
                    }
                    var date = moment(d, format);
                    return !!date.isValid() && date.toDate();
                },
                formatDate: function (date, value) {
                    return isString(value) ? calendar.formatDate(date, value) : moment(date).format(value);
                },
                formatMask: function (val) {
                    return val.replace(/Y{4}/g, "9999").replace(/Y{2}/g, "99").replace(/M{2}/g, "19").replace(/D{2}/g, "39").replace(/H{2}/g, "29").replace(/m{2}/g, "59").replace(/s{2}/g, "59");
                }
            }
        }
    };
    $.datetimepicker = {
        setLocale: function (locale) {
            var newLocale = default_options.i18n[locale] ? locale : "en";
            if (globalLocale !== newLocale) {
                globalLocale = newLocale;
                initDateFormatter();
            }
        },
        setDateFormatter: function (arg) {
            if ("string" == typeof arg && args.hasOwnProperty(arg)) {
                var self = args[arg];
                $.extend(default_options, self.default_options);
                dateHelper = self.formatter;
            } else {
                /** @type {!Function} */
                dateHelper = arg;
            }
        }
    };
    var t = {
        RFC_2822: "D, d M Y H:i:s O",
        ATOM: "Y-m-dTH:i:sP",
        ISO_8601: "Y-m-dTH:i:sO",
        RFC_822: "D, d M y H:i:s O",
        RFC_850: "l, d-M-y H:i:s T",
        RFC_1036: "D, d M y H:i:s O",
        RFC_1123: "D, d M Y H:i:s O",
        RSS: "D, d M Y H:i:s O",
        W3C: "Y-m-dTH:i:sP"
    };
    /**
     * @param {string} name
     * @return {?}
     */
    var isString = function (name) {
        return -1 !== Object.values(t).indexOf(name);
    };
    $.extend($.datetimepicker, t);
    initDateFormatter();
    if (!window.getComputedStyle) {
        /**
         * @param {!Object} el
         * @return {?}
         */
        window.getComputedStyle = function (el) {
            return this.el = el, this.getPropertyValue = function (name) {
                /** @type {!RegExp} */
                var p = /(-([a-z]))/g;
                return "float" === name && (name = "styleFloat"), p.test(name) && (name = name.replace(p, function (canCreateDiscussions, isSlidingUp, shortMonthName) {
                    return shortMonthName.toUpperCase();
                })), el.currentStyle[name] || null;
            }, this;
        };
    }
    if (!Array.prototype.indexOf) {
        /**
         * @param {string} object
         * @param {number=} from
         * @return {number}
         * @template T
         */
        Array.prototype.indexOf = function (object, from) {
            var i;
            var l;
            /** @type {number} */
            i = from || 0;
            /** @type {number} */
            l = this.length;
            for (; i < l; i = i + 1) {
                if (this[i] === object) {
                    return i;
                }
            }
            return -1;
        };
    }
    /**
     * @return {?}
     */
    Date.prototype.countDaysInMonth = function () {
        return (new Date(this.getFullYear(), this.getMonth() + 1, 0)).getDate();
    };
    /**
     * @param {!Element} options
     * @param {!Object} percent
     * @return {?}
     */
    $.fn.xdsoftScroller = function (options, percent) {
        return this.each(function () {
            var timebox;
            var parentHeight;
            var height;
            var scrollbar;
            var scroller;
            var timeboxparent = $(this);
            /**
             * @param {!Object} e
             * @return {?}
             */
            var pointerEventToXY = function (e) {
                var touch;
                var out = {
                    x: 0,
                    y: 0
                };
                return "touchstart" === e.type || "touchmove" === e.type || "touchend" === e.type || "touchcancel" === e.type ? (touch = e.originalEvent.touches[0] || e.originalEvent.changedTouches[0], out.x = touch.clientX, out.y = touch.clientY) : "mousedown" !== e.type && "mouseup" !== e.type && "mousemove" !== e.type && "mouseover" !== e.type && "mouseout" !== e.type && "mouseenter" !== e.type && "mouseleave" !== e.type || (out.x = e.clientX, out.y = e.clientY), out;
            };
            /** @type {number} */
            var maximumOffset = 100;
            /** @type {boolean} */
            var start = false;
            /** @type {number} */
            var dy = 0;
            /** @type {number} */
            var startTop = 0;
            /** @type {number} */
            var h1 = 0;
            /** @type {boolean} */
            var t = false;
            /** @type {number} */
            var h = 0;
            /**
             * @return {undefined}
             */
            var calcOffset = function () {
            };
            if ("hide" !== percent) {
                if (!$(this).hasClass("xdsoft_scroller_box")) {
                    timebox = timeboxparent.children().eq(0);
                    parentHeight = timeboxparent[0].clientHeight;
                    height = timebox[0].offsetHeight;
                    scrollbar = $('<div class="xdsoft_scrollbar"></div>');
                    scroller = $('<div class="xdsoft_scroller"></div>');
                    scrollbar.append(scroller);
                    timeboxparent.addClass("xdsoft_scroller_box").append(scrollbar);
                    /**
                     * @param {!Object} event
                     * @return {undefined}
                     */
                    calcOffset = function (event) {
                        var offset = pointerEventToXY(event).y - dy + h;
                        if (offset < 0) {
                            /** @type {number} */
                            offset = 0;
                        }
                        if (offset + scroller[0].offsetHeight > h1) {
                            /** @type {number} */
                            offset = h1 - scroller[0].offsetHeight;
                        }
                        timeboxparent.trigger("scroll_element.xdsoft_scroller", [maximumOffset ? offset / maximumOffset : 0]);
                    };
                    scroller.on("touchstart.xdsoft_scroller mousedown.xdsoft_scroller", function (e) {
                        if (!parentHeight) {
                            timeboxparent.trigger("resize_scroll.xdsoft_scroller", [percent]);
                        }
                        dy = pointerEventToXY(e).y;
                        /** @type {number} */
                        h = parseInt(scroller.css("margin-top"), 10);
                        h1 = scrollbar[0].offsetHeight;
                        if ("mousedown" === e.type || "touchstart" === e.type) {
                            if (options.ownerDocument) {
                                $(options.ownerDocument.body).addClass("xdsoft_noselect");
                            }
                            $([options.ownerDocument.body, options.contentWindow]).on("touchend mouseup.xdsoft_scroller", function arguments_callee() {
                                $([options.ownerDocument.body, options.contentWindow]).off("touchend mouseup.xdsoft_scroller", arguments_callee).off("mousemove.xdsoft_scroller", calcOffset).removeClass("xdsoft_noselect");
                            });
                            $(options.ownerDocument.body).on("mousemove.xdsoft_scroller", calcOffset);
                        } else {
                            /** @type {boolean} */
                            t = true;
                            e.stopPropagation();
                            e.preventDefault();
                        }
                    }).on("touchmove", function (event) {
                        if (t) {
                            event.preventDefault();
                            calcOffset(event);
                        }
                    }).on("touchend touchcancel", function () {
                        /** @type {boolean} */
                        t = false;
                        /** @type {number} */
                        h = 0;
                    });
                    timeboxparent.on("scroll_element.xdsoft_scroller", function (canCreateDiscussions, percentage) {
                        if (!parentHeight) {
                            timeboxparent.trigger("resize_scroll.xdsoft_scroller", [percentage, true]);
                        }
                        percentage = 1 < percentage ? 1 : percentage < 0 || isNaN(percentage) ? 0 : percentage;
                        scroller.css("margin-top", maximumOffset * percentage);
                        setTimeout(function () {
                            timebox.css("marginTop", -parseInt((timebox[0].offsetHeight - parentHeight) * percentage, 10));
                        }, 10);
                    }).on("resize_scroll.xdsoft_scroller", function (canCreateDiscussions, isSlidingUp, a) {
                        var percent;
                        var top;
                        parentHeight = timeboxparent[0].clientHeight;
                        height = timebox[0].offsetHeight;
                        /** @type {number} */
                        top = (percent = parentHeight / height) * scrollbar[0].offsetHeight;
                        if (1 < percent) {
                            scroller.hide();
                        } else {
                            scroller.show();
                            scroller.css("height", parseInt(10 < top ? top : 10, 10));
                            /** @type {number} */
                            maximumOffset = scrollbar[0].offsetHeight - scroller[0].offsetHeight;
                            if (true !== a) {
                                timeboxparent.trigger("scroll_element.xdsoft_scroller", [isSlidingUp || Math.abs(parseInt(timebox.css("marginTop"), 10)) / (height - parentHeight)]);
                            }
                        }
                    });
                    timeboxparent.on("mousewheel", function (event) {
                        /** @type {number} */
                        var top = Math.abs(parseInt(timebox.css("marginTop"), 10));
                        return (top = top - 20 * event.deltaY) < 0 && (top = 0), timeboxparent.trigger("scroll_element.xdsoft_scroller", [top / (height - parentHeight)]), event.stopPropagation(), false;
                    });
                    timeboxparent.on("touchstart", function (e) {
                        start = pointerEventToXY(e);
                        /** @type {number} */
                        startTop = Math.abs(parseInt(timebox.css("marginTop"), 10));
                    });
                    timeboxparent.on("touchmove", function (e) {
                        if (start) {
                            e.preventDefault();
                            var coord = pointerEventToXY(e);
                            timeboxparent.trigger("scroll_element.xdsoft_scroller", [(startTop - (coord.y - start.y)) / (height - parentHeight)]);
                        }
                    });
                    timeboxparent.on("touchend touchcancel", function () {
                        /** @type {boolean} */
                        start = false;
                        /** @type {number} */
                        startTop = 0;
                    });
                }
                timeboxparent.trigger("resize_scroll.xdsoft_scroller", [percent]);
            } else {
                timeboxparent.find(".xdsoft_scrollbar").hide();
            }
        });
    };
    /**
     * @param {!Object} opt
     * @param {?} opt2
     * @return {?}
     */
    $.fn.datetimepicker = function (opt, opt2) {
        var createDateTimePicker;
        var destroyDateTimePicker;
        var result = this;
        /** @type {number} */
        var CTRLKEY = 17;
        /** @type {number} */
        var ENTER = 13;
        /** @type {number} */
        var VIEWED_PRODUCT_DETAIL = 27;
        /** @type {number} */
        var PAUSED = 37;
        /** @type {number} */
        var STATE_STARTED = 38;
        /** @type {number} */
        var ARROWRIGHT = 39;
        /** @type {number} */
        var targetObj = 40;
        /** @type {number} */
        var TAB = 9;
        /** @type {number} */
        var F5 = 116;
        /** @type {number} */
        var EVAPORATING = 65;
        /** @type {number} */
        var TOOL_AUTO = 67;
        /** @type {number} */
        var PAUSING = 86;
        /** @type {number} */
        var ARROWLEFT = 90;
        /** @type {number} */
        var YKEY = 89;
        /** @type {boolean} */
        var I = false;
        var options = $.isPlainObject(opt) || !opt ? $.extend(true, {}, default_options, opt) : $.extend(true, {}, default_options);
        /** @type {number} */
        var _takingTooLongTimeout = 0;
        return createDateTimePicker = function (input) {
            /**
             * @return {?}
             */
            function getCurrentValue() {
                var dStartDateTime;
                /** @type {boolean} */
                var d = false;
                return options.startDate ? d = _xdsoft_datetime.strToDate(options.startDate) : (d = options.value || (input && input.val && input.val() ? input.val() : "")) ? (d = _xdsoft_datetime.strToDateTime(d), options.yearOffset && (d = new Date(d.getFullYear() - options.yearOffset, d.getMonth(), d.getDate(), d.getHours(), d.getMinutes(), d.getSeconds(), d.getMilliseconds()))) : options.defaultDate && (d = _xdsoft_datetime.strToDateTime(options.defaultDate), options.defaultTime && (dStartDateTime =
                    _xdsoft_datetime.strtotime(options.defaultTime), d.setHours(dStartDateTime.getHours()), d.setMinutes(dStartDateTime.getMinutes()))), d && _xdsoft_datetime.isValidDate(d) ? datetimepicker.data("changed", true) : d = "", d || 0;
            }
            /**
             * @param {!Object} options
             * @return {undefined}
             */
            function setMask(options) {
                /**
                 * @param {string} mask
                 * @param {?} val
                 * @return {?}
                 */
                var isValidValue = function (mask, val) {
                    var specialToken = mask.replace(/([\[\]\/\{\}\(\)\-\.\+]{1})/g, "\\$1").replace(/_/g, "{digit+}").replace(/([0-9]{1})/g, "{digit$1}").replace(/\{digit([0-9]{1})\}/g, "[0-$1_]{1}").replace(/\{digit[\+]\}/g, "[0-9_]{1}");
                    return (new RegExp(specialToken)).test(val);
                };
                /**
                 * @param {string} node
                 * @param {number} pos
                 * @return {?}
                 */
                var setCaretPos = function (node, pos) {
                    if (!(node = "string" == typeof node || node instanceof String ? options.ownerDocument.getElementById(node) : node)) {
                        return false;
                    }
                    if (node.createTextRange) {
                        var range = node.createTextRange();
                        return range.collapse(true), range.moveEnd("character", pos), range.moveStart("character", pos), range.select(), true;
                    }
                    return !!node.setSelectionRange && (node.setSelectionRange(pos, pos), true);
                };
                if (options.mask) {
                    input.off("keydown.xdsoft");
                }
                if (true === options.mask) {
                    if (dateHelper.formatMask) {
                        options.mask = dateHelper.formatMask(options.format);
                    } else {
                        options.mask = options.format.replace(/Y/g, "9999").replace(/F/g, "9999").replace(/m/g, "19").replace(/d/g, "39").replace(/H/g, "29").replace(/i/g, "59").replace(/s/g, "59");
                    }
                }
                if ("string" === $.type(options.mask)) {
                    if (!isValidValue(options.mask, input.val())) {
                        input.val(options.mask.replace(/[0-9]/g, "_"));
                        setCaretPos(input[0], 0);
                    }
                    input.on("paste.xdsoft", function (event) {
                        var images = (event.clipboardData || event.originalEvent.clipboardData || window.clipboardData).getData("text");
                        var val = this.value;
                        var i = this.selectionStart;
                        return val = val.substr(0, i) + images + val.substr(i + images.length), i = i + images.length, isValidValue(options.mask, val) ? (this.value = val, setCaretPos(this, i)) : "" === $.trim(val) ? this.value = options.mask.replace(/[0-9]/g, "_") : input.trigger("error_input.xdsoft"), event.preventDefault(), false;
                    });
                    input.on("keydown.xdsoft", function (event) {
                        var sub;
                        var b = this.value;
                        var key = event.which;
                        var start = this.selectionStart;
                        var end = this.selectionEnd;
                        /** @type {boolean} */
                        var avg = start !== end;
                        if (48 <= key && key <= 57 || 96 <= key && key <= 105 || 8 === key || 46 === key) {
                            /** @type {string} */
                            sub = 8 === key || 46 === key ? "_" : String.fromCharCode(96 <= key && key <= 105 ? key - 48 : key);
                            if (8 === key && start && !avg) {
                                /** @type {number} */
                                start = start - 1;
                            }
                            for (; ;) {
                                var attribValue = options.mask.substr(start, 1);
                                /** @type {boolean} */
                                var increasing = start < options.mask.length;
                                /** @type {boolean} */
                                var earlier = 0 < start;
                                if (!(/[^0-9_]/.test(attribValue) && increasing && earlier)) {
                                    break;
                                }
                                start = start + (8 !== key || avg ? 1 : -1);
                            }
                            if (event.metaKey && (avg = !(start = 0)), avg) {
                                /** @type {number} */
                                var len = end - start;
                                var c = options.mask.replace(/[0-9]/g, "_");
                                var tax = c.substr(start, len).substr(1);
                                b = b.substr(0, start) + (sub + tax) + b.substr(start + len);
                            } else {
                                b = b.substr(0, start) + sub + b.substr(start + 1);
                            }
                            if ("" === $.trim(b)) {
                                b = c;
                            } else {
                                if (start === options.mask.length) {
                                    return event.preventDefault(), false;
                                }
                            }
                            start = start + (8 === key ? 0 : 1);
                            for (; /[^0-9_]/.test(options.mask.substr(start, 1)) && start < options.mask.length && 0 < start;) {
                                start = start + (8 === key ? 0 : 1);
                            }
                            if (isValidValue(options.mask, b)) {
                                this.value = b;
                                setCaretPos(this, start);
                            } else {
                                if ("" === $.trim(b)) {
                                    this.value = options.mask.replace(/[0-9]/g, "_");
                                } else {
                                    input.trigger("error_input.xdsoft");
                                }
                            }
                        } else {
                            if (-1 !== [EVAPORATING, TOOL_AUTO, PAUSING, ARROWLEFT, YKEY].indexOf(key) && I || -1 !== [VIEWED_PRODUCT_DETAIL, STATE_STARTED, targetObj, PAUSED, ARROWRIGHT, F5, CTRLKEY, TAB, ENTER].indexOf(key)) {
                                return true;
                            }
                        }
                        return event.preventDefault(), false;
                    });
                }
            }
            var _takingTooLongTimeout;
            var value;
            var current_time_index;
            var setPos;
            var _xdsoft_datetime;
            var forEachAncestorOf;
            var datetimepicker = $('<div class="xdsoft_datetimepicker xdsoft_noselect"></div>');
            var xdsoft_copyright = $('<div class="xdsoft_copyright"><a target="_blank" href="http://xdsoft.net/jqplugins/datetimepicker/">xdsoft.net</a></div>');
            var datepicker = $('<div class="xdsoft_datepicker active"></div>');
            var mounth_picker = $('<div class="xdsoft_monthpicker"><button type="button" class="xdsoft_prev"></button><button type="button" class="xdsoft_today_button"></button><div class="xdsoft_label xdsoft_month"><span></span><i></i></div><div class="xdsoft_label xdsoft_year"><span></span><i></i></div><button type="button" class="xdsoft_next"></button></div>');
            var $body = $('<div class="xdsoft_calendar"></div>');
            var o = $('<div class="xdsoft_timepicker active"><button type="button" class="xdsoft_prev"></button><div class="xdsoft_time_box"></div><button type="button" class="xdsoft_next"></button></div>');
            var timeboxparent = o.find(".xdsoft_time_box").eq(0);
            var timebox = $('<div class="xdsoft_time_variant"></div>');
            var applyButton = $('<button type="button" class="xdsoft_save_selected blue-gradient-button">Save Selected</button>');
            var $dataList = $('<div class="xdsoft_select xdsoft_monthselect"><div></div></div>');
            var $region_span = $('<div class="xdsoft_select xdsoft_yearselect"><div></div></div>');
            /** @type {boolean} */
            var s = false;
            /** @type {number} */
            var paintNodesTimeout = 0;
            if (options.id) {
                datetimepicker.attr("id", options.id);
            }
            if (options.style) {
                datetimepicker.attr("style", options.style);
            }
            if (options.weeks) {
                datetimepicker.addClass("xdsoft_showweeks");
            }
            if (options.rtl) {
                datetimepicker.addClass("xdsoft_rtl");
            }
            datetimepicker.addClass("xdsoft_" + options.theme);
            datetimepicker.addClass(options.className);
            mounth_picker.find(".xdsoft_month span").after($dataList);
            mounth_picker.find(".xdsoft_year span").after($region_span);
            mounth_picker.find(".xdsoft_month,.xdsoft_year").on("touchstart mousedown.xdsoft", function (event) {
                var lines;
                var i;
                var select = $(this).find(".xdsoft_select").eq(0);
                /** @type {number} */
                var FALSE = 0;
                /** @type {number} */
                var top = 0;
                var visible = select.is(":visible");
                mounth_picker.find(".xdsoft_select").hide();
                if (_xdsoft_datetime.currentTime) {
                    FALSE = _xdsoft_datetime.currentTime[$(this).hasClass("xdsoft_month") ? "getMonth" : "getFullYear"]();
                }
                select[visible ? "hide" : "show"]();
                lines = select.find("div.xdsoft_option");
                /** @type {number} */
                i = 0;
                for (; i < lines.length && lines.eq(i).data("value") !== FALSE; i = i + 1) {
                    top = top + lines[0].offsetHeight;
                }
                return select.xdsoftScroller(options, top / (select.children()[0].offsetHeight - select[0].clientHeight)), event.stopPropagation(), false;
            });
            /**
             * @param {!KeyboardEvent} evt
             * @return {undefined}
             */
            var onClick = function (evt) {
                var e = evt.originalEvent;
                var first = e.touches ? e.touches[0] : e;
                this.touchStartPosition = this.touchStartPosition || first;
                /** @type {number} */
                var lightI = Math.abs(this.touchStartPosition.clientX - first.clientX);
                /** @type {number} */
                var lightJ = Math.abs(this.touchStartPosition.clientY - first.clientY);
                if (Math.sqrt(lightI * lightI + lightJ * lightJ) > options.touchMovedThreshold) {
                    /** @type {boolean} */
                    this.touchMoved = true;
                }
            };
            mounth_picker.find(".xdsoft_select").xdsoftScroller(options).on("touchstart mousedown.xdsoft", function (event) {
                var e = event.originalEvent;
                /** @type {boolean} */
                this.touchMoved = false;
                this.touchStartPosition = e.touches ? e.touches[0] : e;
                event.stopPropagation();
                event.preventDefault();
            }).on("touchmove", ".xdsoft_option", onClick).on("touchend mousedown.xdsoft", ".xdsoft_option", function () {
                if (!this.touchMoved) {
                    if (!(void 0 !== _xdsoft_datetime.currentTime && null !== _xdsoft_datetime.currentTime)) {
                        _xdsoft_datetime.currentTime = _xdsoft_datetime.now();
                    }
                    var e = _xdsoft_datetime.currentTime.getFullYear();
                    if (_xdsoft_datetime && _xdsoft_datetime.currentTime) {
                        _xdsoft_datetime.currentTime[$(this).parent().parent().hasClass("xdsoft_monthselect") ? "setMonth" : "setFullYear"]($(this).data("value"));
                    }
                    $(this).parent().parent().hide();
                    datetimepicker.trigger("xchange.xdsoft");
                    if (options.onChangeMonth && $.isFunction(options.onChangeMonth)) {
                        options.onChangeMonth.call(datetimepicker, _xdsoft_datetime.currentTime, datetimepicker.data("input"));
                    }
                    if (e !== _xdsoft_datetime.currentTime.getFullYear() && $.isFunction(options.onChangeYear)) {
                        options.onChangeYear.call(datetimepicker, _xdsoft_datetime.currentTime, datetimepicker.data("input"));
                    }
                }
            });
            /**
             * @return {?}
             */
            datetimepicker.getValue = function () {
                return _xdsoft_datetime.getCurrentTime();
            };
            /**
             * @param {!Object} _options
             * @return {undefined}
             */
            datetimepicker.setOptions = function (_options) {
                var highlightedDates = {};
                options = $.extend(true, {}, options, _options);
                if (_options.allowTimes && $.isArray(_options.allowTimes) && _options.allowTimes.length) {
                    options.allowTimes = $.extend(true, [], _options.allowTimes);
                }
                if (_options.weekends && $.isArray(_options.weekends) && _options.weekends.length) {
                    options.weekends = $.extend(true, [], _options.weekends);
                }
                if (_options.allowDates && $.isArray(_options.allowDates) && _options.allowDates.length) {
                    options.allowDates = $.extend(true, [], _options.allowDates);
                }
                if (_options.allowDateRe && "[object String]" === Object.prototype.toString.call(_options.allowDateRe)) {
                    /** @type {!RegExp} */
                    options.allowDateRe = new RegExp(_options.allowDateRe);
                }
                if (_options.highlightedDates && $.isArray(_options.highlightedDates) && _options.highlightedDates.length) {
                    $.each(_options.highlightedDates, function (canCreateDiscussions, clusterShardData) {
                        var exDesc;
                        var splitData = $.map(clusterShardData.split(","), $.trim);
                        var hDate = new HighlightedDate(dateHelper.parseDate(splitData[0], options.formatDate), splitData[1], splitData[2]);
                        var keyDate = dateHelper.formatDate(hDate.date, options.formatDate);
                        if (void 0 !== highlightedDates[keyDate]) {
                            if ((exDesc = highlightedDates[keyDate].desc) && exDesc.length && hDate.desc && hDate.desc.length) {
                                /** @type {string} */
                                highlightedDates[keyDate].desc = exDesc + "\n" + hDate.desc;
                            }
                        } else {
                            highlightedDates[keyDate] = hDate;
                        }
                    });
                    options.highlightedDates = $.extend(true, [], highlightedDates);
                }
                if (_options.highlightedPeriods && $.isArray(_options.highlightedPeriods) && _options.highlightedPeriods.length) {
                    highlightedDates = $.extend(true, [], options.highlightedDates);
                    $.each(_options.highlightedPeriods, function (canCreateDiscussions, value) {
                        var dateTest;
                        var dateEnd;
                        var desc;
                        var hDate;
                        var keyDate;
                        var exDesc;
                        var style;
                        if ($.isArray(value)) {
                            dateTest = value[0];
                            dateEnd = value[1];
                            desc = value[2];
                            style = value[3];
                        } else {
                            var splitData = $.map(value.split(","), $.trim);
                            dateTest = dateHelper.parseDate(splitData[0], options.formatDate);
                            dateEnd = dateHelper.parseDate(splitData[1], options.formatDate);
                            desc = splitData[2];
                            style = splitData[3];
                        }
                        for (; dateTest <= dateEnd;) {
                            hDate = new HighlightedDate(dateTest, desc, style);
                            keyDate = dateHelper.formatDate(dateTest, options.formatDate);
                            dateTest.setDate(dateTest.getDate() + 1);
                            if (void 0 !== highlightedDates[keyDate]) {
                                if ((exDesc = highlightedDates[keyDate].desc) && exDesc.length && hDate.desc && hDate.desc.length) {
                                    /** @type {string} */
                                    highlightedDates[keyDate].desc = exDesc + "\n" + hDate.desc;
                                }
                            } else {
                                highlightedDates[keyDate] = hDate;
                            }
                        }
                    });
                    options.highlightedDates = $.extend(true, [], highlightedDates);
                }
                if (_options.disabledDates && $.isArray(_options.disabledDates) && _options.disabledDates.length) {
                    options.disabledDates = $.extend(true, [], _options.disabledDates);
                }
                if (_options.disabledWeekDays && $.isArray(_options.disabledWeekDays) && _options.disabledWeekDays.length) {
                    options.disabledWeekDays = $.extend(true, [], _options.disabledWeekDays);
                }
                if (!(!options.open && !options.opened || options.inline)) {
                    input.trigger("open.xdsoft");
                }
                if (options.inline) {
                    /** @type {boolean} */
                    s = true;
                    datetimepicker.addClass("xdsoft_inline");
                    input.after(datetimepicker).hide();
                }
                if (options.inverseButton) {
                    /** @type {string} */
                    options.next = "xdsoft_prev";
                    /** @type {string} */
                    options.prev = "xdsoft_next";
                }
                if (options.datepicker) {
                    datepicker.addClass("active");
                } else {
                    datepicker.removeClass("active");
                }
                if (options.timepicker) {
                    o.addClass("active");
                } else {
                    o.removeClass("active");
                }
                if (options.value) {
                    _xdsoft_datetime.setCurrentTime(options.value);
                    if (input && input.val) {
                        input.val(_xdsoft_datetime.str);
                    }
                }
                if (isNaN(options.dayOfWeekStart)) {
                    /** @type {number} */
                    options.dayOfWeekStart = 0;
                } else {
                    /** @type {number} */
                    options.dayOfWeekStart = parseInt(options.dayOfWeekStart, 10) % 7;
                }
                if (!options.timepickerScrollbar) {
                    timeboxparent.xdsoftScroller(options, "hide");
                }
                if (options.minDate && /^[\+\-](.*)$/.test(options.minDate)) {
                    options.minDate = dateHelper.formatDate(_xdsoft_datetime.strToDateTime(options.minDate), options.formatDate);
                }
                if (options.maxDate && /^[\+\-](.*)$/.test(options.maxDate)) {
                    options.maxDate = dateHelper.formatDate(_xdsoft_datetime.strToDateTime(options.maxDate), options.formatDate);
                }
                if (options.minDateTime && /^\+(.*)$/.test(options.minDateTime)) {
                    options.minDateTime = _xdsoft_datetime.strToDateTime(options.minDateTime).dateFormat(options.formatDate);
                }
                if (options.maxDateTime && /^\+(.*)$/.test(options.maxDateTime)) {
                    options.maxDateTime = _xdsoft_datetime.strToDateTime(options.maxDateTime).dateFormat(options.formatDate);
                }
                applyButton.toggle(options.showApplyButton);
                mounth_picker.find(".xdsoft_today_button").css("visibility", options.todayButton ? "visible" : "hidden");
                mounth_picker.find("." + options.prev).css("visibility", options.prevButton ? "visible" : "hidden");
                mounth_picker.find("." + options.next).css("visibility", options.nextButton ? "visible" : "hidden");
                setMask(options);
                if (options.validateOnBlur) {
                    input.off("blur.xdsoft").on("blur.xdsoft", function () {
                        if (options.allowBlank && (!$.trim($(this).val()).length || "string" == typeof options.mask && $.trim($(this).val()) === options.mask.replace(/[0-9]/g, "_"))) {
                            $(this).val(null);
                            datetimepicker.data("xdsoft_datetime").empty();
                        } else {
                            var today = dateHelper.parseDate($(this).val(), options.format);
                            if (today) {
                                $(this).val(dateHelper.formatDate(today, options.format));
                            } else {
                                /** @type {number} */
                                var noteGroup1 = +[$(this).val()[0], $(this).val()[1]].join("");
                                /** @type {number} */
                                var noteGroup2 = +[$(this).val()[2], $(this).val()[3]].join("");
                                if (!options.datepicker && options.timepicker && 0 <= noteGroup1 && noteGroup1 < 24 && 0 <= noteGroup2 && noteGroup2 < 60) {
                                    $(this).val([noteGroup1, noteGroup2].map(function (a) {
                                        return 9 < a ? a : "0" + a;
                                    }).join(":"));
                                } else {
                                    $(this).val(dateHelper.formatDate(_xdsoft_datetime.now(), options.format));
                                }
                            }
                            datetimepicker.data("xdsoft_datetime").setCurrentTime($(this).val());
                        }
                        datetimepicker.trigger("changedatetime.xdsoft");
                        datetimepicker.trigger("close.xdsoft");
                    });
                }
                /** @type {number} */
                options.dayOfWeekStartPrev = 0 === options.dayOfWeekStart ? 6 : options.dayOfWeekStart - 1;
                datetimepicker.trigger("xchange.xdsoft").trigger("afterOpen.xdsoft");
            };
            datetimepicker.data("options", options).on("touchstart mousedown.xdsoft", function (event) {
                return event.stopPropagation(), event.preventDefault(), $region_span.hide(), $dataList.hide(), false;
            });
            timeboxparent.append(timebox);
            timeboxparent.xdsoftScroller(options);
            datetimepicker.on("afterOpen.xdsoft", function () {
                timeboxparent.xdsoftScroller(options);
            });
            datetimepicker.append(datepicker).append(o);
            if (true !== options.withoutCopyright) {
                datetimepicker.append(xdsoft_copyright);
            }
            datepicker.append(mounth_picker).append($body).append(applyButton);
            if (options.insideParent) {
                $(input).parent().append(datetimepicker);
            } else {
                $(options.parentID).append(datetimepicker);
            }
            _xdsoft_datetime = new function () {
                var _this = this;
                /**
                 * @param {boolean} norecursion
                 * @return {?}
                 */
                _this.now = function (norecursion) {
                    var dTempDate1;
                    var newIslamicDate;
                    /** @type {!Date} */
                    var date = new Date;
                    return !norecursion && options.defaultDate && (dTempDate1 = _this.strToDateTime(options.defaultDate), date.setFullYear(dTempDate1.getFullYear()), date.setMonth(dTempDate1.getMonth()), date.setDate(dTempDate1.getDate())), date.setFullYear(date.getFullYear()), !norecursion && options.defaultTime && (newIslamicDate = _this.strtotime(options.defaultTime), date.setHours(newIslamicDate.getHours()), date.setMinutes(newIslamicDate.getMinutes()), date.setSeconds(newIslamicDate.getSeconds()), date.setMilliseconds(newIslamicDate.getMilliseconds())),
                        date;
                };
                /**
                 * @param {?} d
                 * @return {?}
                 */
                _this.isValidDate = function (d) {
                    return "[object Date]" === Object.prototype.toString.call(d) && !isNaN(d.getTime());
                };
                /**
                 * @param {string} dTime
                 * @param {string} requireValidDate
                 * @return {undefined}
                 */
                _this.setCurrentTime = function (dTime, requireValidDate) {
                    if ("string" == typeof dTime) {
                        _this.currentTime = _this.strToDateTime(dTime);
                    } else {
                        if (_this.isValidDate(dTime)) {
                            /** @type {string} */
                            _this.currentTime = dTime;
                        } else {
                            if (dTime || requireValidDate || !options.allowBlank || options.inline) {
                                _this.currentTime = _this.now();
                            } else {
                                /** @type {null} */
                                _this.currentTime = null;
                            }
                        }
                    }
                    datetimepicker.trigger("xchange.xdsoft");
                };
                /**
                 * @return {undefined}
                 */
                _this.empty = function () {
                    /** @type {null} */
                    _this.currentTime = null;
                };
                /**
                 * @return {?}
                 */
                _this.getCurrentTime = function () {
                    return _this.currentTime;
                };
                /**
                 * @return {?}
                 */
                _this.nextMonth = function () {
                    if (!(void 0 !== _this.currentTime && null !== _this.currentTime)) {
                        _this.currentTime = _this.now();
                    }
                    var e;
                    var month = _this.currentTime.getMonth() + 1;
                    return 12 === month && (_this.currentTime.setFullYear(_this.currentTime.getFullYear() + 1), month = 0), e = _this.currentTime.getFullYear(), _this.currentTime.setDate(Math.min((new Date(_this.currentTime.getFullYear(), month + 1, 0)).getDate(), _this.currentTime.getDate())), _this.currentTime.setMonth(month), options.onChangeMonth && $.isFunction(options.onChangeMonth) && options.onChangeMonth.call(datetimepicker, _xdsoft_datetime.currentTime, datetimepicker.data("input")), e !== _this.currentTime.getFullYear() &&
                        $.isFunction(options.onChangeYear) && options.onChangeYear.call(datetimepicker, _xdsoft_datetime.currentTime, datetimepicker.data("input")), datetimepicker.trigger("xchange.xdsoft"), month;
                };
                /**
                 * @return {?}
                 */
                _this.prevMonth = function () {
                    if (!(void 0 !== _this.currentTime && null !== _this.currentTime)) {
                        _this.currentTime = _this.now();
                    }
                    /** @type {number} */
                    var month = _this.currentTime.getMonth() - 1;
                    return -1 === month && (_this.currentTime.setFullYear(_this.currentTime.getFullYear() - 1), month = 11), _this.currentTime.setDate(Math.min((new Date(_this.currentTime.getFullYear(), month + 1, 0)).getDate(), _this.currentTime.getDate())), _this.currentTime.setMonth(month), options.onChangeMonth && $.isFunction(options.onChangeMonth) && options.onChangeMonth.call(datetimepicker, _xdsoft_datetime.currentTime, datetimepicker.data("input")), datetimepicker.trigger("xchange.xdsoft"), month;
                };
                /**
                 * @param {!Date} datetime
                 * @return {?}
                 */
                _this.getWeekOfYear = function (datetime) {
                    if (options.onGetWeekOfYear && $.isFunction(options.onGetWeekOfYear)) {
                        var week = options.onGetWeekOfYear.call(datetimepicker, datetime);
                        if (void 0 !== week) {
                            return week;
                        }
                    }
                    /** @type {!Date} */
                    var onejan = new Date(datetime.getFullYear(), 0, 1);
                    return 4 !== onejan.getDay() && onejan.setMonth(0, 1 + (4 - onejan.getDay() + 7) % 7), Math.ceil(((datetime - onejan) / 864E5 + onejan.getDay() + 1) / 7);
                };
                /**
                 * @param {?} sDateTime
                 * @return {?}
                 */
                _this.strToDateTime = function (sDateTime) {
                    var boxShadowOpacityInitialValue;
                    var sTime;
                    /** @type {!Array} */
                    var tmpDate = [];
                    return sDateTime && sDateTime instanceof Date && _this.isValidDate(sDateTime) ? sDateTime : ((tmpDate = /^([+-]{1})(.*)$/.exec(sDateTime)) && (tmpDate[2] = dateHelper.parseDate(tmpDate[2], options.formatDate)), sTime = tmpDate && tmpDate[2] ? (boxShadowOpacityInitialValue = tmpDate[2].getTime() - 6E4 * tmpDate[2].getTimezoneOffset(), new Date(_this.now(true).getTime() + parseInt(tmpDate[1] + "1", 10) * boxShadowOpacityInitialValue)) : sDateTime ? dateHelper.parseDate(sDateTime, options.format) :
                        _this.now(), _this.isValidDate(sTime) || (sTime = _this.now()), sTime);
                };
                /**
                 * @param {?} sDate
                 * @return {?}
                 */
                _this.strToDate = function (sDate) {
                    if (sDate && sDate instanceof Date && _this.isValidDate(sDate)) {
                        return sDate;
                    }
                    var currentTime = sDate ? dateHelper.parseDate(sDate, options.formatDate) : _this.now(true);
                    return _this.isValidDate(currentTime) || (currentTime = _this.now(true)), currentTime;
                };
                /**
                 * @param {?} sTime
                 * @return {?}
                 */
                _this.strtotime = function (sTime) {
                    if (sTime && sTime instanceof Date && _this.isValidDate(sTime)) {
                        return sTime;
                    }
                    var currentTime = sTime ? dateHelper.parseDate(sTime, options.formatTime) : _this.now(true);
                    return _this.isValidDate(currentTime) || (currentTime = _this.now(true)), currentTime;
                };
                /**
                 * @return {?}
                 */
                _this.str = function () {
                    var format = options.format;
                    return options.yearOffset && (format = (format = format.replace("Y", _this.currentTime.getFullYear() + options.yearOffset)).replace("y", String(_this.currentTime.getFullYear() + options.yearOffset).substring(2, 4))), dateHelper.formatDate(_this.currentTime, format);
                };
                _this.currentTime = this.now();
            };
            applyButton.on("touchend click", function (event) {
                event.preventDefault();
                datetimepicker.data("changed", true);
                _xdsoft_datetime.setCurrentTime(getCurrentValue());
                input.val(_xdsoft_datetime.str());
                datetimepicker.trigger("close.xdsoft");
            });
            mounth_picker.find(".xdsoft_today_button").on("touchend mousedown.xdsoft", function () {
                datetimepicker.data("changed", true);
                _xdsoft_datetime.setCurrentTime(0, true);
                datetimepicker.trigger("afterOpen.xdsoft");
            }).on("dblclick.xdsoft", function () {
                var dTempDate1;
                var min;
                var max = _xdsoft_datetime.getCurrentTime();
                /** @type {!Date} */
                max = new Date(max.getFullYear(), max.getMonth(), max.getDate());
                dTempDate1 = _xdsoft_datetime.strToDate(options.minDate);
                if (!(max < (dTempDate1 = new Date(dTempDate1.getFullYear(), dTempDate1.getMonth(), dTempDate1.getDate())))) {
                    min = _xdsoft_datetime.strToDate(options.maxDate);
                    if (!((min = new Date(min.getFullYear(), min.getMonth(), min.getDate())) < max)) {
                        input.val(_xdsoft_datetime.str());
                        input.trigger("change");
                        datetimepicker.trigger("close.xdsoft");
                    }
                }
            });
            mounth_picker.find(".xdsoft_prev,.xdsoft_next").on("touchend mousedown.xdsoft", function () {
                var $this = $(this);
                /** @type {number} */
                var timer = 0;
                /** @type {boolean} */
                var r = false;
                !function arguments_callee1(v) {
                    if ($this.hasClass(options.next)) {
                        _xdsoft_datetime.nextMonth();
                    } else {
                        if ($this.hasClass(options.prev)) {
                            _xdsoft_datetime.prevMonth();
                        }
                    }
                    if (options.monthChangeSpinner) {
                        if (!r) {
                            /** @type {number} */
                            timer = setTimeout(arguments_callee1, v || 100);
                        }
                    }
                }(500);
                $([options.ownerDocument.body, options.contentWindow]).on("touchend mouseup.xdsoft", function arguments_callee2() {
                    clearTimeout(timer);
                    /** @type {boolean} */
                    r = true;
                    $([options.ownerDocument.body, options.contentWindow]).off("touchend mouseup.xdsoft", arguments_callee2);
                });
            });
            o.find(".xdsoft_prev,.xdsoft_next").on("touchend mousedown.xdsoft", function () {
                var $this = $(this);
                /** @type {number} */
                var timer = 0;
                /** @type {boolean} */
                var s = false;
                /** @type {number} */
                var period = 110;
                !function arguments_callee4(v) {
                    var pheight = timeboxparent[0].clientHeight;
                    var height = timebox[0].offsetHeight;
                    /** @type {number} */
                    var top = Math.abs(parseInt(timebox.css("marginTop"), 10));
                    if ($this.hasClass(options.next) && height - pheight - options.timeHeightInTimePicker >= top) {
                        timebox.css("marginTop", "-" + (top + options.timeHeightInTimePicker) + "px");
                    } else {
                        if ($this.hasClass(options.prev) && 0 <= top - options.timeHeightInTimePicker) {
                            timebox.css("marginTop", "-" + (top - options.timeHeightInTimePicker) + "px");
                        }
                    }
                    timeboxparent.trigger("scroll_element.xdsoft_scroller", [Math.abs(parseInt(timebox[0].style.marginTop, 10) / (height - pheight))]);
                    /** @type {number} */
                    period = 10 < period ? 10 : period - 10;
                    if (!s) {
                        /** @type {number} */
                        timer = setTimeout(arguments_callee4, v || period);
                    }
                }(500);
                $([options.ownerDocument.body, options.contentWindow]).on("touchend mouseup.xdsoft", function arguments_callee2() {
                    clearTimeout(timer);
                    /** @type {boolean} */
                    s = true;
                    $([options.ownerDocument.body, options.contentWindow]).off("touchend mouseup.xdsoft", arguments_callee2);
                });
            });
            /** @type {number} */
            _takingTooLongTimeout = 0;
            datetimepicker.on("xchange.xdsoft", function (event) {
                clearTimeout(_takingTooLongTimeout);
                /** @type {number} */
                _takingTooLongTimeout = setTimeout(function () {
                    if (!(void 0 !== _xdsoft_datetime.currentTime && null !== _xdsoft_datetime.currentTime)) {
                        _xdsoft_datetime.currentTime = _xdsoft_datetime.now();
                    }
                    var j;
                    var hDate;
                    var a;
                    var d;
                    var r;
                    var arrayPartial;
                    var url;
                    var line_time;
                    var btnClass;
                    var ix;
                    /** @type {string} */
                    var str = "";
                    /** @type {!Date} */
                    var start = new Date(_xdsoft_datetime.currentTime.getFullYear(), _xdsoft_datetime.currentTime.getMonth(), 1, 12, 0, 0);
                    /** @type {number} */
                    var i = 0;
                    var today = _xdsoft_datetime.now();
                    /** @type {boolean} */
                    var now = false;
                    /** @type {boolean} */
                    var first = false;
                    /** @type {boolean} */
                    var currentTime = false;
                    /** @type {boolean} */
                    var value = false;
                    /** @type {!Array} */
                    var classes = [];
                    /** @type {boolean} */
                    var v = true;
                    /** @type {string} */
                    var val = "";
                    for (; start.getDay() !== options.dayOfWeekStart;) {
                        start.setDate(start.getDate() - 1);
                    }
                    /** @type {string} */
                    str = str + "<table><thead><tr>";
                    if (options.weeks) {
                        /** @type {string} */
                        str = str + "<th></th>";
                    }
                    /** @type {number} */
                    j = 0;
                    for (; j < 7; j = j + 1) {
                        /** @type {string} */
                        str = str + ("<th>" + options.i18n[globalLocale].dayOfWeekShort[(j + options.dayOfWeekStart) % 7] + "</th>");
                    }
                    /** @type {string} */
                    str = str + "</tr></thead>";
                    /** @type {string} */
                    str = str + "<tbody>";
                    if (false !== options.maxDate) {
                        now = _xdsoft_datetime.strToDate(options.maxDate);
                        /** @type {!Date} */
                        now = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 23, 59, 59, 999);
                    }
                    if (false !== options.minDate) {
                        first = _xdsoft_datetime.strToDate(options.minDate);
                        /** @type {!Date} */
                        first = new Date(first.getFullYear(), first.getMonth(), first.getDate());
                    }
                    if (false !== options.minDateTime) {
                        currentTime = _xdsoft_datetime.strToDate(options.minDateTime);
                        /** @type {!Date} */
                        currentTime = new Date(currentTime.getFullYear(), currentTime.getMonth(), currentTime.getDate(), currentTime.getHours(), currentTime.getMinutes(), currentTime.getSeconds());
                    }
                    if (false !== options.maxDateTime) {
                        value = _xdsoft_datetime.strToDate(options.maxDateTime);
                        /** @type {!Date} */
                        value = new Date(value.getFullYear(), value.getMonth(), value.getDate(), value.getHours(), value.getMinutes(), value.getSeconds());
                    }
                    if (false !== value) {
                        /** @type {number} */
                        ix = 31 * (12 * value.getFullYear() + value.getMonth()) + value.getDate();
                    }
                    for (; i < _xdsoft_datetime.currentTime.countDaysInMonth() || start.getDay() !== options.dayOfWeekStart || _xdsoft_datetime.currentTime.getMonth() === start.getMonth();) {
                        /** @type {!Array} */
                        classes = [];
                        /** @type {number} */
                        i = i + 1;
                        /** @type {number} */
                        a = start.getDay();
                        /** @type {number} */
                        d = start.getDate();
                        /** @type {number} */
                        r = start.getFullYear();
                        /** @type {number} */
                        temp = start.getMonth();
                        arrayPartial = _xdsoft_datetime.getWeekOfYear(start);
                        /** @type {string} */
                        btnClass = "";
                        classes.push("xdsoft_date");
                        url = options.beforeShowDay && $.isFunction(options.beforeShowDay.call) ? options.beforeShowDay.call(datetimepicker, start) : null;
                        if (options.allowDateRe && "[object RegExp]" === Object.prototype.toString.call(options.allowDateRe)) {
                            if (!options.allowDateRe.test(dateHelper.formatDate(start, options.formatDate))) {
                                classes.push("xdsoft_disabled");
                            }
                        }
                        if (options.allowDates && 0 < options.allowDates.length && -1 === options.allowDates.indexOf(dateHelper.formatDate(start, options.formatDate))) {
                            classes.push("xdsoft_disabled");
                        }
                        /** @type {number} */
                        var SINT = 31 * (12 * start.getFullYear() + start.getMonth()) + start.getDate();
                        if (false !== now && now < start || false !== currentTime && start < currentTime || false !== first && start < first || false !== value && ix < SINT || url && false === url[0]) {
                            classes.push("xdsoft_disabled");
                        }
                        if (-1 !== options.disabledDates.indexOf(dateHelper.formatDate(start, options.formatDate))) {
                            classes.push("xdsoft_disabled");
                        }
                        if (-1 !== options.disabledWeekDays.indexOf(a)) {
                            classes.push("xdsoft_disabled");
                        }
                        if (input.is("[disabled]")) {
                            classes.push("xdsoft_disabled");
                        }
                        if (url && "" !== url[1]) {
                            classes.push(url[1]);
                        }
                        if (_xdsoft_datetime.currentTime.getMonth() !== temp) {
                            classes.push("xdsoft_other_month");
                        }
                        if ((options.defaultSelect || datetimepicker.data("changed")) && dateHelper.formatDate(_xdsoft_datetime.currentTime, options.formatDate) === dateHelper.formatDate(start, options.formatDate)) {
                            classes.push("xdsoft_current");
                        }
                        if (dateHelper.formatDate(today, options.formatDate) === dateHelper.formatDate(start, options.formatDate)) {
                            classes.push("xdsoft_today");
                        }
                        if (!(0 !== start.getDay() && 6 !== start.getDay() && -1 === options.weekends.indexOf(dateHelper.formatDate(start, options.formatDate)))) {
                            classes.push("xdsoft_weekend");
                        }
                        if (void 0 !== options.highlightedDates[dateHelper.formatDate(start, options.formatDate)]) {
                            hDate = options.highlightedDates[dateHelper.formatDate(start, options.formatDate)];
                            classes.push(void 0 === hDate.style ? "xdsoft_highlighted_default" : hDate.style);
                            btnClass = void 0 === hDate.desc ? "" : hDate.desc;
                        }
                        if (options.beforeShowDay && $.isFunction(options.beforeShowDay)) {
                            classes.push(options.beforeShowDay(start));
                        }
                        if (v) {
                            /** @type {string} */
                            str = str + "<tr>";
                            /** @type {boolean} */
                            v = false;
                            if (options.weeks) {
                                /** @type {string} */
                                str = str + ("<th>" + arrayPartial + "</th>");
                            }
                        }
                        /** @type {string} */
                        str = str + ('<td data-date="' + d + '" data-month="' + temp + '" data-year="' + r + '" class="xdsoft_date xdsoft_day_of_week' + start.getDay() + " " + classes.join(" ") + '" title="' + btnClass + '"><div>' + d + "</div></td>");
                        if (start.getDay() === options.dayOfWeekStartPrev) {
                            /** @type {string} */
                            str = str + "</tr>";
                            /** @type {boolean} */
                            v = true;
                        }
                        start.setDate(d + 1);
                    }
                    /** @type {string} */
                    str = str + "</tbody></table>";
                    $body.html(str);
                    mounth_picker.find(".xdsoft_label span").eq(0).text(options.i18n[globalLocale].months[_xdsoft_datetime.currentTime.getMonth()]);
                    mounth_picker.find(".xdsoft_label span").eq(1).text(_xdsoft_datetime.currentTime.getFullYear() + options.yearOffset);
                    /** @type {string} */
                    temp = val = "";
                    /** @type {number} */
                    var min = 0;
                    if (false !== options.minTime) {
                        var now = _xdsoft_datetime.strtotime(options.minTime);
                        min = 60 * now.getHours() + now.getMinutes();
                    }
                    /** @type {number} */
                    var result = 1440;
                    if (false !== options.maxTime) {
                        now = _xdsoft_datetime.strtotime(options.maxTime);
                        result = 60 * now.getHours() + now.getMinutes();
                    }
                    if (false !== options.minDateTime) {
                        now = _xdsoft_datetime.strToDateTime(options.minDateTime);
                        if (dateHelper.formatDate(_xdsoft_datetime.currentTime, options.formatDate) === dateHelper.formatDate(now, options.formatDate)) {
                            var temp = 60 * now.getHours() + now.getMinutes();
                            if (min < temp) {
                                min = temp;
                            }
                        }
                    }
                    if (false !== options.maxDateTime) {
                        now = _xdsoft_datetime.strToDateTime(options.maxDateTime);
                        if (dateHelper.formatDate(_xdsoft_datetime.currentTime, options.formatDate) === dateHelper.formatDate(now, options.formatDate)) {
                            if ((temp = 60 * now.getHours() + now.getMinutes()) < result) {
                                result = temp;
                            }
                        }
                    }
                    if (line_time = function (h, m) {
                        var before;
                        var now = _xdsoft_datetime.now();
                        var r = options.allowTimes && $.isArray(options.allowTimes) && options.allowTimes.length;
                        now.setHours(h);
                        /** @type {number} */
                        h = parseInt(now.getHours(), 10);
                        now.setMinutes(m);
                        /** @type {number} */
                        m = parseInt(now.getMinutes(), 10);
                        /** @type {!Array} */
                        classes = [];
                        /** @type {number} */
                        var value = 60 * h + m;
                        if (input.is("[disabled]") || result <= value || value < min) {
                            classes.push("xdsoft_disabled");
                        }
                        (before = new Date(_xdsoft_datetime.currentTime)).setHours(parseInt(_xdsoft_datetime.currentTime.getHours(), 10));
                        if (!r) {
                            before.setMinutes(Math[options.roundTime](_xdsoft_datetime.currentTime.getMinutes() / options.step) * options.step);
                        }
                        if ((options.initTime || options.defaultSelect || datetimepicker.data("changed")) && before.getHours() === parseInt(h, 10) && (!r && 59 < options.step || before.getMinutes() === parseInt(m, 10))) {
                            if (options.defaultSelect || datetimepicker.data("changed")) {
                                classes.push("xdsoft_current");
                            } else {
                                if (options.initTime) {
                                    classes.push("xdsoft_init_time");
                                }
                            }
                        }
                        if (parseInt(today.getHours(), 10) === parseInt(h, 10) && parseInt(today.getMinutes(), 10) === parseInt(m, 10)) {
                            classes.push("xdsoft_today");
                        }
                        val = val + ('<div class="xdsoft_time ' + classes.join(" ") + '" data-hour="' + h + '" data-minute="' + m + '">' + dateHelper.formatDate(now, options.formatTime) + "</div>");
                    }, options.allowTimes && $.isArray(options.allowTimes) && options.allowTimes.length) {
                        /** @type {number} */
                        i = 0;
                        for (; i < options.allowTimes.length; i = i + 1) {
                            line_time(_xdsoft_datetime.strtotime(options.allowTimes[i]).getHours(), temp = _xdsoft_datetime.strtotime(options.allowTimes[i]).getMinutes());
                        }
                    } else {
                        /** @type {number} */
                        j = i = 0;
                        for (; i < (options.hours12 ? 12 : 24); i = i + 1) {
                            /** @type {number} */
                            j = 0;
                            for (; j < 60; j = j + options.step) {
                                var num = 60 * i + j;
                                if (!(num < min)) {
                                    if (!(result <= num)) {
                                        line_time((i < 10 ? "0" : "") + i, temp = (j < 10 ? "0" : "") + j);
                                    }
                                }
                            }
                        }
                    }
                    timebox.html(val);
                    /** @type {string} */
                    opt = "";
                    /** @type {number} */
                    i = parseInt(options.yearStart, 10);
                    for (; i <= parseInt(options.yearEnd, 10); i = i + 1) {
                        /** @type {string} */
                        opt = opt + ('<div class="xdsoft_option ' + (_xdsoft_datetime.currentTime.getFullYear() === i ? "xdsoft_current" : "") + '" data-value="' + i + '">' + (i + options.yearOffset) + "</div>");
                    }
                    $region_span.children().eq(0).html(opt);
                    /** @type {number} */
                    i = parseInt(options.monthStart, 10);
                    /** @type {string} */
                    opt = "";
                    for (; i <= parseInt(options.monthEnd, 10); i = i + 1) {
                        /** @type {string} */
                        opt = opt + ('<div class="xdsoft_option ' + (_xdsoft_datetime.currentTime.getMonth() === i ? "xdsoft_current" : "") + '" data-value="' + i + '">' + options.i18n[globalLocale].months[i] + "</div>");
                    }
                    $dataList.children().eq(0).html(opt);
                    $(datetimepicker).trigger("generate.xdsoft");
                }, 10);
                event.stopPropagation();
            }).on("afterOpen.xdsoft", function () {
                var classType;
                var pheight;
                var height;
                var top;
                if (options.timepicker) {
                    if (timebox.find(".xdsoft_current").length) {
                        /** @type {string} */
                        classType = ".xdsoft_current";
                    } else {
                        if (timebox.find(".xdsoft_init_time").length) {
                            /** @type {string} */
                            classType = ".xdsoft_init_time";
                        }
                    }
                    if (classType) {
                        pheight = timeboxparent[0].clientHeight;
                        if ((height = timebox[0].offsetHeight) - pheight < (top = timebox.find(classType).index() * options.timeHeightInTimePicker + 1)) {
                            /** @type {number} */
                            top = height - pheight;
                        }
                        timeboxparent.trigger("scroll_element.xdsoft_scroller", [parseInt(top, 10) / (height - pheight)]);
                    } else {
                        timeboxparent.trigger("scroll_element.xdsoft_scroller", [0]);
                    }
                }
            });
            /** @type {number} */
            value = 0;
            $body.on("touchend click.xdsoft", "td", function (event) {
                event.stopPropagation();
                value = value + 1;
                var $this = $(this);
                var currentTime = _xdsoft_datetime.currentTime;
                if (null == currentTime && (_xdsoft_datetime.currentTime = _xdsoft_datetime.now(), currentTime = _xdsoft_datetime.currentTime), $this.hasClass("xdsoft_disabled")) {
                    return false;
                }
                currentTime.setDate(1);
                currentTime.setFullYear($this.data("year"));
                currentTime.setMonth($this.data("month"));
                currentTime.setDate($this.data("date"));
                datetimepicker.trigger("select.xdsoft", [currentTime]);
                input.val(_xdsoft_datetime.str());
                if (options.onSelectDate && $.isFunction(options.onSelectDate)) {
                    options.onSelectDate.call(datetimepicker, _xdsoft_datetime.currentTime, datetimepicker.data("input"), event);
                }
                datetimepicker.data("changed", true);
                datetimepicker.trigger("xchange.xdsoft");
                datetimepicker.trigger("changedatetime.xdsoft");
                if ((1 < value || true === options.closeOnDateSelect || false === options.closeOnDateSelect && !options.timepicker) && !options.inline) {
                    datetimepicker.trigger("close.xdsoft");
                }
                setTimeout(function () {
                    /** @type {number} */
                    value = 0;
                }, 200);
            });
            timebox.on("touchstart", "div", function (canCreateDiscussions) {
                /** @type {boolean} */
                this.touchMoved = false;
            }).on("touchmove", "div", onClick).on("touchend click.xdsoft", "div", function (event) {
                if (!this.touchMoved) {
                    event.stopPropagation();
                    var $this = $(this);
                    var currentTime = _xdsoft_datetime.currentTime;
                    if (null == currentTime && (_xdsoft_datetime.currentTime = _xdsoft_datetime.now(), currentTime = _xdsoft_datetime.currentTime), $this.hasClass("xdsoft_disabled")) {
                        return false;
                    }
                    currentTime.setHours($this.data("hour"));
                    currentTime.setMinutes($this.data("minute"));
                    datetimepicker.trigger("select.xdsoft", [currentTime]);
                    datetimepicker.data("input").val(_xdsoft_datetime.str());
                    if (options.onSelectTime && $.isFunction(options.onSelectTime)) {
                        options.onSelectTime.call(datetimepicker, _xdsoft_datetime.currentTime, datetimepicker.data("input"), event);
                    }
                    datetimepicker.data("changed", true);
                    datetimepicker.trigger("xchange.xdsoft");
                    datetimepicker.trigger("changedatetime.xdsoft");
                    if (true !== options.inline && true === options.closeOnTimeSelect) {
                        datetimepicker.trigger("close.xdsoft");
                    }
                }
            });
            datepicker.on("mousewheel.xdsoft", function (event) {
                return !options.scrollMonth || (event.deltaY < 0 ? _xdsoft_datetime.nextMonth() : _xdsoft_datetime.prevMonth(), false);
            });
            input.on("mousewheel.xdsoft", function (event) {
                return !options.scrollInput || (!options.datepicker && options.timepicker ? (0 <= (current_time_index = timebox.find(".xdsoft_current").length ? timebox.find(".xdsoft_current").eq(0).index() : 0) + event.deltaY && current_time_index + event.deltaY < timebox.children().length && (current_time_index = current_time_index + event.deltaY), timebox.children().eq(current_time_index).length && timebox.children().eq(current_time_index).trigger("mousedown"), false) : options.datepicker && !options.timepicker ?
                    (datepicker.trigger(event, [event.deltaY, event.deltaX, event.deltaY]), input.val && input.val(_xdsoft_datetime.str()), datetimepicker.trigger("changedatetime.xdsoft"), false) : void 0);
            });
            datetimepicker.on("changedatetime.xdsoft", function (entry__3995__auto__) {
                if (options.onChangeDateTime && $.isFunction(options.onChangeDateTime)) {
                    var t = datetimepicker.data("input");
                    options.onChangeDateTime.call(datetimepicker, _xdsoft_datetime.currentTime, t, entry__3995__auto__);
                    delete options.value;
                    t.trigger("change");
                }
            }).on("generate.xdsoft", function () {
                if (options.onGenerate && $.isFunction(options.onGenerate)) {
                    options.onGenerate.call(datetimepicker, _xdsoft_datetime.currentTime, datetimepicker.data("input"));
                }
                if (s) {
                    datetimepicker.trigger("afterOpen.xdsoft");
                    /** @type {boolean} */
                    s = false;
                }
            }).on("click.xdsoft", function (event) {
                event.stopPropagation();
            });
            /** @type {number} */
            current_time_index = 0;
            /**
             * @param {!Node} node
             * @param {!Function} callback
             * @return {undefined}
             */
            forEachAncestorOf = function (node, callback) {
                do {
                    if (!(node = node.parentNode) || false === callback(node)) {
                        break;
                    }
                } while ("HTML" !== node.nodeName);
            };
            /**
             * @return {undefined}
             */
            setPos = function () {
                var pos;
                var e;
                var top;
                var left;
                var position;
                var datetimepickerElem;
                var i;
                var t;
                var windowWidth;
                var k;
                var style;
                var viewportHeight;
                var scrollTop;
                if (pos = (t = datetimepicker.data("input")).offset(), e = t[0], k = "top", top = pos.top + e.offsetHeight - 1, left = pos.left, position = "absolute", windowWidth = $(options.contentWindow).width(), viewportHeight = $(options.contentWindow).height(), scrollTop = $(options.contentWindow).scrollTop(), options.ownerDocument.documentElement.clientWidth - pos.left < datepicker.parent().outerWidth(true)) {
                    /** @type {number} */
                    var halfOutline = datepicker.parent().outerWidth(true) - e.offsetWidth;
                    /** @type {number} */
                    left = left - halfOutline;
                }
                if ("rtl" === t.parent().css("direction")) {
                    /** @type {number} */
                    left = left - (datetimepicker.outerWidth() - t.outerWidth());
                }
                if (options.fixed) {
                    /** @type {number} */
                    top = top - scrollTop;
                    /** @type {number} */
                    left = left - $(options.contentWindow).scrollLeft();
                    /** @type {string} */
                    position = "fixed";
                } else {
                    /** @type {boolean} */
                    i = false;
                    forEachAncestorOf(e, function (ad) {
                        return null !== ad && ("fixed" === options.contentWindow.getComputedStyle(ad).getPropertyValue("position") ? !(i = true) : void 0);
                    });
                    if (i && !options.insideParent) {
                        /** @type {string} */
                        position = "fixed";
                        if (top + datetimepicker.outerHeight() > viewportHeight + scrollTop) {
                            /** @type {string} */
                            k = "bottom";
                            /** @type {number} */
                            top = viewportHeight + scrollTop - pos.top;
                        } else {
                            /** @type {number} */
                            top = top - scrollTop;
                        }
                    } else {
                        if (top + datetimepicker[0].offsetHeight > viewportHeight + scrollTop) {
                            /** @type {number} */
                            top = pos.top - datetimepicker[0].offsetHeight + 1;
                        }
                    }
                    if (top < 0) {
                        /** @type {number} */
                        top = 0;
                    }
                    if (left + e.offsetWidth > windowWidth) {
                        /** @type {number} */
                        left = windowWidth - e.offsetWidth;
                    }
                }
                datetimepickerElem = datetimepicker[0];
                forEachAncestorOf(datetimepickerElem, function (ancestorNode) {
                    if ("relative" === options.contentWindow.getComputedStyle(ancestorNode).getPropertyValue("position") && windowWidth >= ancestorNode.offsetWidth) {
                        return left = left - (windowWidth - ancestorNode.offsetWidth) / 2, false;
                    }
                });
                style = {
                    position: position,
                    left: options.insideParent ? e.offsetLeft : left,
                    top: "",
                    bottom: ""
                };
                if (options.insideParent) {
                    style[k] = e.offsetTop + e.offsetHeight;
                } else {
                    /** @type {number} */
                    style[k] = top;
                }
                datetimepicker.css(style);
            };
            datetimepicker.on("open.xdsoft", function (event) {
                /** @type {boolean} */
                var onShow = true;
                if (options.onShow && $.isFunction(options.onShow)) {
                    onShow = options.onShow.call(datetimepicker, _xdsoft_datetime.currentTime, datetimepicker.data("input"), event);
                }
                if (false !== onShow) {
                    datetimepicker.show();
                    setPos();
                    $(options.contentWindow).off("resize.xdsoft", setPos).on("resize.xdsoft", setPos);
                    if (options.closeOnWithoutClick) {
                        $([options.ownerDocument.body, options.contentWindow]).on("touchstart mousedown.xdsoft", function arguments_callee6() {
                            datetimepicker.trigger("close.xdsoft");
                            $([options.ownerDocument.body, options.contentWindow]).off("touchstart mousedown.xdsoft", arguments_callee6);
                        });
                    }
                }
            }).on("close.xdsoft", function (event) {
                /** @type {boolean} */
                var onShow = true;
                mounth_picker.find(".xdsoft_month,.xdsoft_year").find(".xdsoft_select").hide();
                if (options.onClose && $.isFunction(options.onClose)) {
                    onShow = options.onClose.call(datetimepicker, _xdsoft_datetime.currentTime, datetimepicker.data("input"), event);
                }
                if (!(false === onShow || options.opened || options.inline)) {
                    datetimepicker.hide();
                }
                event.stopPropagation();
            }).on("toggle.xdsoft", function () {
                if (datetimepicker.is(":visible")) {
                    datetimepicker.trigger("close.xdsoft");
                } else {
                    datetimepicker.trigger("open.xdsoft");
                }
            }).data("input", input);
            /** @type {number} */
            paintNodesTimeout = 0;
            datetimepicker.data("xdsoft_datetime", _xdsoft_datetime);
            datetimepicker.setOptions(options);
            _xdsoft_datetime.setCurrentTime(getCurrentValue());
            input.data("xdsoft_datetimepicker", datetimepicker).on("open.xdsoft focusin.xdsoft mousedown.xdsoft touchstart", function () {
                if (!(input.is(":disabled") || input.data("xdsoft_datetimepicker").is(":visible") && options.closeOnInputClick)) {
                    if (options.openOnFocus) {
                        clearTimeout(paintNodesTimeout);
                        /** @type {number} */
                        paintNodesTimeout = setTimeout(function () {
                            if (!input.is(":disabled")) {
                                /** @type {boolean} */
                                s = true;
                                _xdsoft_datetime.setCurrentTime(getCurrentValue(), true);
                                if (options.mask) {
                                    setMask(options);
                                }
                                datetimepicker.trigger("open.xdsoft");
                            }
                        }, 100);
                    }
                }
            }).on("keydown.xdsoft", function (ev) {
                var t;
                var w = ev.which;
                return -1 !== [ENTER].indexOf(w) && options.enterLikeTab ? (t = $("input:visible,textarea:visible,button:visible,a:visible"), datetimepicker.trigger("close.xdsoft"), t.eq(t.index(this) + 1).focus(), false) : -1 !== [TAB].indexOf(w) ? (datetimepicker.trigger("close.xdsoft"), true) : void 0;
            }).on("blur.xdsoft", function () {
                datetimepicker.trigger("close.xdsoft");
            });
        }, destroyDateTimePicker = function (input) {
            var datetimepicker = input.data("xdsoft_datetimepicker");
            if (datetimepicker) {
                datetimepicker.data("xdsoft_datetime", null);
                datetimepicker.remove();
                input.data("xdsoft_datetimepicker", null).off(".xdsoft");
                $(options.contentWindow).off("resize.xdsoft");
                $([options.contentWindow, options.ownerDocument.body]).off("mousedown.xdsoft touchstart");
                if (input.unmousewheel) {
                    input.unmousewheel();
                }
            }
        }, $(options.ownerDocument).off("keydown.xdsoftctrl keyup.xdsoftctrl").off("keydown.xdsoftcmd keyup.xdsoftcmd").on("keydown.xdsoftctrl", function (e) {
            if (e.keyCode === CTRLKEY) {
                /** @type {boolean} */
                I = true;
            }
        }).on("keyup.xdsoftctrl", function (e) {
            if (e.keyCode === CTRLKEY) {
                /** @type {boolean} */
                I = false;
            }
        }).on("keydown.xdsoftcmd", function (event) {
            if (91 === event.keyCode) {
                true;
            }
        }).on("keyup.xdsoftcmd", function (event) {
            if (91 === event.keyCode) {
                false;
            }
        }), this.each(function () {
            var input;
            var datetimepicker = $(this).data("xdsoft_datetimepicker");
            if (datetimepicker) {
                if ("string" === $.type(opt)) {
                    switch (opt) {
                        case "show":
                            $(this).select().focus();
                            datetimepicker.trigger("open.xdsoft");
                            break;
                        case "hide":
                            datetimepicker.trigger("close.xdsoft");
                            break;
                        case "toggle":
                            datetimepicker.trigger("toggle.xdsoft");
                            break;
                        case "destroy":
                            destroyDateTimePicker($(this));
                            break;
                        case "reset":
                            this.value = this.defaultValue;
                            if (!(this.value && datetimepicker.data("xdsoft_datetime").isValidDate(dateHelper.parseDate(this.value, options.format)))) {
                                datetimepicker.data("changed", false);
                            }
                            datetimepicker.data("xdsoft_datetime").setCurrentTime(this.value);
                            break;
                        case "validate":
                            datetimepicker.data("input").trigger("blur.xdsoft");
                            break;
                        default:
                            if (datetimepicker[opt] && $.isFunction(datetimepicker[opt])) {
                                result = datetimepicker[opt](opt2);
                            }
                    }
                } else {
                    datetimepicker.setOptions(opt);
                }
                return 0;
            }
            if ("string" !== $.type(opt)) {
                if (!options.lazyInit || options.open || options.inline) {
                    createDateTimePicker($(this));
                } else {
                    (input = $(this)).on("open.xdsoft focusin.xdsoft mousedown.xdsoft touchstart", function initOnActionCallback() {
                        if (!(input.is(":disabled") || input.data("xdsoft_datetimepicker"))) {
                            clearTimeout(_takingTooLongTimeout);
                            /** @type {number} */
                            _takingTooLongTimeout = setTimeout(function () {
                                if (!input.data("xdsoft_datetimepicker")) {
                                    createDateTimePicker(input);
                                }
                                input.off("open.xdsoft focusin.xdsoft mousedown.xdsoft touchstart", initOnActionCallback).trigger("open.xdsoft");
                            }, 100);
                        }
                    });
                }
            }
        }), result;
    };
    $.fn.datetimepicker.defaults = default_options;
};
!function (factory) {
    if ("function" == typeof define && define.amd) {
        define(["jquery", "jquery-mousewheel"], factory);
    } else {
        if ("object" == typeof exports) {
            module.exports = factory(require("jquery"));
        } else {
            factory(jQuery);
        }
    }
}(datetimepickerFactory), function (factory) {
    if ("function" == typeof define && define.amd) {
        define(["jquery"], factory);
    } else {
        if ("object" == typeof exports) {
            /** @type {function(!Object): undefined} */
            module.exports = factory;
        } else {
            factory(jQuery);
        }
    }
}(function ($) {
    /**
     * @param {!Object} event
     * @return {?}
     */
    function handler(event) {
        var absDelta;
        var orgEvent = event || window.event;
        /** @type {!Array<?>} */
        var args = slice.call(arguments, 1);
        /** @type {number} */
        var delta = 0;
        /** @type {number} */
        var deltaX = 0;
        /** @type {number} */
        var deltaY = 0;
        /** @type {number} */
        var offsetX = 0;
        /** @type {number} */
        var offsetY = 0;
        if ((event = $.event.fix(orgEvent)).type = "mousewheel", "detail" in orgEvent && (deltaY = -1 * orgEvent.detail), "wheelDelta" in orgEvent && (deltaY = orgEvent.wheelDelta), "wheelDeltaY" in orgEvent && (deltaY = orgEvent.wheelDeltaY), "wheelDeltaX" in orgEvent && (deltaX = -1 * orgEvent.wheelDeltaX), "axis" in orgEvent && orgEvent.axis === orgEvent.HORIZONTAL_AXIS && (deltaX = -1 * deltaY, deltaY = 0), delta = 0 === deltaY ? deltaX : deltaY, "deltaY" in orgEvent && (delta = deltaY = -1 * orgEvent.deltaY),
            "deltaX" in orgEvent && (deltaX = orgEvent.deltaX, 0 === deltaY && (delta = -1 * deltaX)), 0 !== deltaY || 0 !== deltaX) {
            if (1 === orgEvent.deltaMode) {
                var lineHeight = $.data(this, "mousewheel-line-height");
                /** @type {number} */
                delta = delta * lineHeight;
                /** @type {number} */
                deltaY = deltaY * lineHeight;
                /** @type {number} */
                deltaX = deltaX * lineHeight;
            } else {
                if (2 === orgEvent.deltaMode) {
                    var pageHeight = $.data(this, "mousewheel-page-height");
                    /** @type {number} */
                    delta = delta * pageHeight;
                    /** @type {number} */
                    deltaY = deltaY * pageHeight;
                    /** @type {number} */
                    deltaX = deltaX * pageHeight;
                }
            }
            if (absDelta = Math.max(Math.abs(deltaY), Math.abs(deltaX)), (!lowestDelta || absDelta < lowestDelta) && shouldAdjustOldDeltas(orgEvent, lowestDelta = absDelta) && (lowestDelta = lowestDelta / 40), shouldAdjustOldDeltas(orgEvent, absDelta) && (delta = delta / 40, deltaX = deltaX / 40, deltaY = deltaY / 40), delta = Math[1 <= delta ? "floor" : "ceil"](delta / lowestDelta), deltaX = Math[1 <= deltaX ? "floor" : "ceil"](deltaX / lowestDelta), deltaY = Math[1 <= deltaY ? "floor" : "ceil"](deltaY /
                lowestDelta), special.settings.normalizeOffset && this.getBoundingClientRect) {
                var rect = this.getBoundingClientRect();
                /** @type {number} */
                offsetX = event.clientX - rect.left;
                /** @type {number} */
                offsetY = event.clientY - rect.top;
            }
            return event.deltaX = deltaX, event.deltaY = deltaY, event.deltaFactor = lowestDelta, event.offsetX = offsetX, event.offsetY = offsetY, event.deltaMode = 0, args.unshift(event, delta, deltaX, deltaY), timeout && clearTimeout(timeout), timeout = setTimeout(checkChanges, 200), ($.event.dispatch || $.event.handle).apply(this, args);
        }
    }
    /**
     * @return {undefined}
     */
    function checkChanges() {
        /** @type {null} */
        lowestDelta = null;
    }
    /**
     * @param {!Object} orgEvent
     * @param {number} absDelta
     * @return {?}
     */
    function shouldAdjustOldDeltas(orgEvent, absDelta) {
        return special.settings.adjustOldDeltas && "mousewheel" === orgEvent.type && absDelta % 120 == 0;
    }
    var timeout;
    var lowestDelta;
    /** @type {!Array} */
    var toFix = ["wheel", "mousewheel", "DOMMouseScroll", "MozMousePixelScroll"];
    /** @type {!Array} */
    var toBind = "onwheel" in document || 9 <= document.documentMode ? ["wheel"] : ["mousewheel", "DomMouseScroll", "MozMousePixelScroll"];
    /** @type {function(this:(IArrayLike<T>|string), *=, *=): !Array<T>} */
    var slice = Array.prototype.slice;
    if ($.event.fixHooks) {
        /** @type {number} */
        var i = toFix.length;
        for (; i;) {
            $.event.fixHooks[toFix[--i]] = $.event.mouseHooks;
        }
    }
    var special = $.event.special.mousewheel = {
        version: "3.1.12",
        setup: function () {
            if (this.addEventListener) {
                /** @type {number} */
                var i = toBind.length;
                for (; i;) {
                    this.addEventListener(toBind[--i], handler, false);
                }
            } else {
                /** @type {function(!Object): ?} */
                this.onmousewheel = handler;
            }
            $.data(this, "mousewheel-line-height", special.getLineHeight(this));
            $.data(this, "mousewheel-page-height", special.getPageHeight(this));
        },
        teardown: function () {
            if (this.removeEventListener) {
                /** @type {number} */
                var i = toBind.length;
                for (; i;) {
                    this.removeEventListener(toBind[--i], handler, false);
                }
            } else {
                /** @type {null} */
                this.onmousewheel = null;
            }
            $.removeData(this, "mousewheel-line-height");
            $.removeData(this, "mousewheel-page-height");
        },
        getLineHeight: function (elem) {
            var $elem = $(elem);
            var d = $elem["offsetParent" in $.fn ? "offsetParent" : "parent"]();
            return d.length || (d = $("body")), parseInt(d.css("fontSize"), 10) || parseInt($elem.css("fontSize"), 10) || 16;
        },
        getPageHeight: function (elem) {
            return $(elem).height();
        },
        settings: {
            adjustOldDeltas: true,
            normalizeOffset: true
        }
    };
    $.fn.extend({
        mousewheel: function (fn) {
            return fn ? this.bind("mousewheel", fn) : this.trigger("mousewheel");
        },
        unmousewheel: function (fn) {
            return this.unbind("mousewheel", fn);
        }
    });
});
